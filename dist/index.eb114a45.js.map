{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-ecf1ad7a872712ab.js","src/index.ts","src/pages/index.ts","node_modules/@vaadin/router/dist/vaadin-router.js","node_modules/@vaadin/router/src/utils.js","node_modules/@vaadin/router/src/triggers/click.js","node_modules/@vaadin/router/src/triggers/popstate.js","node_modules/@vaadin/router/node_modules/path-to-regexp/index.js","node_modules/@vaadin/router/src/resolver/matchPath.js","node_modules/@vaadin/router/src/resolver/matchRoute.js","node_modules/@vaadin/router/src/resolver/resolveRoute.js","node_modules/@vaadin/router/src/resolver/resolver.js","node_modules/@vaadin/router/src/resolver/generateUrls.js","node_modules/@vaadin/router/src/triggers/setNavigationTriggers.js","node_modules/@vaadin/router/src/transitions/animate.js","node_modules/@vaadin/router/src/router.js","node_modules/@vaadin/router/node_modules/@vaadin/vaadin-development-mode-detector/vaadin-development-mode-detector.js","node_modules/@vaadin/router/node_modules/@vaadin/vaadin-usage-statistics/vaadin-usage-statistics-collect.js","node_modules/@vaadin/router/src/router-meta.js","node_modules/@vaadin/router/src/router-config.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/state.ts","src/rtdb.ts","node_modules/firebase/app/dist/index.esm.js","node_modules/firebase/app/index.ts","node_modules/@firebase/app/dist/esm/index.esm2017.js","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/logger.ts","node_modules/@firebase/app/src/constants.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/errors.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/@firebase/app/src/registerCoreComponents.ts","node_modules/@firebase/app/src/index.ts","node_modules/@firebase/component/dist/esm/index.esm2017.js","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/constants.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@firebase/util/dist/index.esm2017.js","node_modules/@firebase/util/src/constants.ts","node_modules/@firebase/util/src/assert.ts","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/deepCopy.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/emulator.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/json.ts","node_modules/@firebase/util/src/jwt.ts","node_modules/@firebase/util/src/obj.ts","node_modules/@firebase/util/src/promise.ts","node_modules/@firebase/util/src/query.ts","node_modules/@firebase/util/src/sha1.ts","node_modules/@firebase/util/src/subscribe.ts","node_modules/@firebase/util/src/validation.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@firebase/util/src/uuid.ts","node_modules/@firebase/util/src/exponential_backoff.ts","node_modules/@firebase/util/src/formatters.ts","node_modules/@firebase/util/src/compat.ts","node_modules/@firebase/logger/dist/esm/index.esm2017.js","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/index.js","node_modules/idb/build/wrap-idb-value.js","node_modules/firebase/database/dist/index.esm.js","node_modules/@firebase/database/dist/index.esm2017.js","node_modules/@firebase/database/src/core/version.ts","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/OnDisconnect.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/api/Transaction.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/index.ts","node_modules/process/browser.js","node_modules/lodash/map.js","node_modules/lodash/_arrayMap.js","node_modules/lodash/_baseIteratee.js","node_modules/lodash/_baseMatches.js","node_modules/lodash/_baseIsMatch.js","node_modules/lodash/_Stack.js","node_modules/lodash/_ListCache.js","node_modules/lodash/_listCacheClear.js","node_modules/lodash/_listCacheDelete.js","node_modules/lodash/_assocIndexOf.js","node_modules/lodash/eq.js","node_modules/lodash/_listCacheGet.js","node_modules/lodash/_listCacheHas.js","node_modules/lodash/_listCacheSet.js","node_modules/lodash/_stackClear.js","node_modules/lodash/_stackDelete.js","node_modules/lodash/_stackGet.js","node_modules/lodash/_stackHas.js","node_modules/lodash/_stackSet.js","node_modules/lodash/_Map.js","node_modules/lodash/_getNative.js","node_modules/lodash/_baseIsNative.js","node_modules/lodash/isFunction.js","node_modules/lodash/_baseGetTag.js","node_modules/lodash/_Symbol.js","node_modules/lodash/_root.js","node_modules/lodash/_freeGlobal.js","node_modules/lodash/_getRawTag.js","node_modules/lodash/_objectToString.js","node_modules/lodash/isObject.js","node_modules/lodash/_isMasked.js","node_modules/lodash/_coreJsData.js","node_modules/lodash/_toSource.js","node_modules/lodash/_getValue.js","node_modules/lodash/_MapCache.js","node_modules/lodash/_mapCacheClear.js","node_modules/lodash/_Hash.js","node_modules/lodash/_hashClear.js","node_modules/lodash/_nativeCreate.js","node_modules/lodash/_hashDelete.js","node_modules/lodash/_hashGet.js","node_modules/lodash/_hashHas.js","node_modules/lodash/_hashSet.js","node_modules/lodash/_mapCacheDelete.js","node_modules/lodash/_getMapData.js","node_modules/lodash/_isKeyable.js","node_modules/lodash/_mapCacheGet.js","node_modules/lodash/_mapCacheHas.js","node_modules/lodash/_mapCacheSet.js","node_modules/lodash/_baseIsEqual.js","node_modules/lodash/_baseIsEqualDeep.js","node_modules/lodash/_equalArrays.js","node_modules/lodash/_SetCache.js","node_modules/lodash/_setCacheAdd.js","node_modules/lodash/_setCacheHas.js","node_modules/lodash/_arraySome.js","node_modules/lodash/_cacheHas.js","node_modules/lodash/_equalByTag.js","node_modules/lodash/_Uint8Array.js","node_modules/lodash/_mapToArray.js","node_modules/lodash/_setToArray.js","node_modules/lodash/_equalObjects.js","node_modules/lodash/_getAllKeys.js","node_modules/lodash/_baseGetAllKeys.js","node_modules/lodash/_arrayPush.js","node_modules/lodash/isArray.js","node_modules/lodash/_getSymbols.js","node_modules/lodash/_arrayFilter.js","node_modules/lodash/stubArray.js","node_modules/lodash/keys.js","node_modules/lodash/_arrayLikeKeys.js","node_modules/lodash/_baseTimes.js","node_modules/lodash/isArguments.js","node_modules/lodash/_baseIsArguments.js","node_modules/lodash/isObjectLike.js","node_modules/lodash/isBuffer.js","node_modules/lodash/stubFalse.js","node_modules/lodash/_isIndex.js","node_modules/lodash/isTypedArray.js","node_modules/lodash/_baseIsTypedArray.js","node_modules/lodash/isLength.js","node_modules/lodash/_baseUnary.js","node_modules/lodash/_nodeUtil.js","node_modules/lodash/_baseKeys.js","node_modules/lodash/_isPrototype.js","node_modules/lodash/_nativeKeys.js","node_modules/lodash/_overArg.js","node_modules/lodash/isArrayLike.js","node_modules/lodash/_getTag.js","node_modules/lodash/_DataView.js","node_modules/lodash/_Promise.js","node_modules/lodash/_Set.js","node_modules/lodash/_WeakMap.js","node_modules/lodash/_getMatchData.js","node_modules/lodash/_isStrictComparable.js","node_modules/lodash/_matchesStrictComparable.js","node_modules/lodash/_baseMatchesProperty.js","node_modules/lodash/get.js","node_modules/lodash/_baseGet.js","node_modules/lodash/_castPath.js","node_modules/lodash/_isKey.js","node_modules/lodash/isSymbol.js","node_modules/lodash/_stringToPath.js","node_modules/lodash/_memoizeCapped.js","node_modules/lodash/memoize.js","node_modules/lodash/toString.js","node_modules/lodash/_baseToString.js","node_modules/lodash/_toKey.js","node_modules/lodash/hasIn.js","node_modules/lodash/_baseHasIn.js","node_modules/lodash/_hasPath.js","node_modules/lodash/identity.js","node_modules/lodash/property.js","node_modules/lodash/_baseProperty.js","node_modules/lodash/_basePropertyDeep.js","node_modules/lodash/_baseMap.js","node_modules/lodash/_baseEach.js","node_modules/lodash/_baseForOwn.js","node_modules/lodash/_baseFor.js","node_modules/lodash/_createBaseFor.js","node_modules/lodash/_createBaseEach.js","src/pages/chat.ts","src/router.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"69f74e7f31319ffd\";module.bundle.HMR_BUNDLE_ID = \"5a9365aceb114a45\";\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      removeErrorOverlay();\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        } // Render the fancy html overlay\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n      document.body.appendChild(overlay);\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\\n          \").concat(stack, \"\\n        </pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n    return;\n  }\n\n  var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n  if (deps) {\n    var fn = new Function('require', 'module', 'exports', asset.output);\n    modules[asset.id] = [fn, deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(module.bundle.root, id).some(function (v) {\n    return hmrAcceptCheck(v[0], v[1], null);\n  });\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import \"./pages/index\";\r\nimport \"./pages/chat\";\r\nimport \"./router\";\r\nimport { state } from \"./state\";\r\n\r\nstate.init();\r\n","import { Router } from \"@vaadin/router\";\r\nimport { state } from \"../state\";\r\n\r\nclass Home extends HTMLElement {\r\n  connectedCallback() {\r\n    this.render();\r\n\r\n    const form = this.querySelector(\".form\");\r\n\r\n    form.addEventListener(\"submit\", (e) => {\r\n      e.preventDefault();\r\n      const target = e.target as any;\r\n      console.log(target.nombre.value);\r\n      state.setNombre(target.nombre.value);\r\n      Router.go(\"/chat\");\r\n    });\r\n  }\r\n  render() {\r\n    this.innerHTML = `\r\n        <form class=\"form\">\r\n          <div>\r\n             <label>Tu nombre</label>\r\n          </div>\r\n          <input type=\"text\" name=\"nombre\">\r\n          <button>Comenzar</button>\r\n        </form>\r\n      `;\r\n  }\r\n}\r\ncustomElements.define(\"x-home-page\", Home);\r\n","function toArray(objectOrArray) {\n  objectOrArray = objectOrArray || [];\n  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n}\n\nfunction log(msg) {\n  return `[Vaadin.Router] ${msg}`;\n}\n\nfunction logValue(value) {\n  if (typeof value !== 'object') {\n    return String(value);\n  }\n\n  const stringType = Object.prototype.toString.call(value).match(/ (.*)\\]$/)[1];\n  if (stringType === 'Object' || stringType === 'Array') {\n    return `${stringType} ${JSON.stringify(value)}`;\n  } else {\n    return stringType;\n  }\n}\n\nconst MODULE = 'module';\nconst NOMODULE = 'nomodule';\nconst bundleKeys = [MODULE, NOMODULE];\n\nfunction ensureBundle(src) {\n  if (!src.match(/.+\\.[m]?js$/)) {\n    throw new Error(\n      log(`Unsupported type for bundle \"${src}\": .js or .mjs expected.`)\n    );\n  }\n}\n\nfunction ensureRoute(route) {\n  if (!route || !isString(route.path)) {\n    throw new Error(\n      log(`Expected route config to be an object with a \"path\" string property, or an array of such objects`)\n    );\n  }\n\n  const bundle = route.bundle;\n\n  const stringKeys = ['component', 'redirect', 'bundle'];\n  if (\n    !isFunction(route.action) &&\n    !Array.isArray(route.children) &&\n    !isFunction(route.children) &&\n    !isObject(bundle) &&\n    !stringKeys.some(key => isString(route[key]))\n  ) {\n    throw new Error(\n      log(\n        `Expected route config \"${route.path}\" to include either \"${stringKeys.join('\", \"')}\" ` +\n        `or \"action\" function but none found.`\n      )\n    );\n  }\n\n  if (bundle) {\n    if (isString(bundle)) {\n      ensureBundle(bundle);\n    } else if (!bundleKeys.some(key => key in bundle)) {\n      throw new Error(\n        log('Expected route bundle to include either \"' + NOMODULE + '\" or \"' + MODULE + '\" keys, or both')\n      );\n    } else {\n      bundleKeys.forEach(key => key in bundle && ensureBundle(bundle[key]));\n    }\n  }\n\n  if (route.redirect) {\n    ['bundle', 'component'].forEach(overriddenProp => {\n      if (overriddenProp in route) {\n        console.warn(\n          log(\n            `Route config \"${route.path}\" has both \"redirect\" and \"${overriddenProp}\" properties, ` +\n            `and \"redirect\" will always override the latter. Did you mean to only use \"${overriddenProp}\"?`\n          )\n        );\n      }\n    });\n  }\n}\n\nfunction ensureRoutes(routes) {\n  toArray(routes).forEach(route => ensureRoute(route));\n}\n\nfunction loadScript(src, key) {\n  let script = document.head.querySelector('script[src=\"' + src + '\"][async]');\n  if (!script) {\n    script = document.createElement('script');\n    script.setAttribute('src', src);\n    if (key === MODULE) {\n      script.setAttribute('type', MODULE);\n    } else if (key === NOMODULE) {\n      script.setAttribute(NOMODULE, '');\n    }\n    script.async = true;\n  }\n  return new Promise((resolve, reject) => {\n    script.onreadystatechange = script.onload = e => {\n      script.__dynamicImportLoaded = true;\n      resolve(e);\n    };\n    script.onerror = e => {\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      reject(e);\n    };\n    if (script.parentNode === null) {\n      document.head.appendChild(script);\n    } else if (script.__dynamicImportLoaded) {\n      resolve();\n    }\n  });\n}\n\nfunction loadBundle(bundle) {\n  if (isString(bundle)) {\n    return loadScript(bundle);\n  } else {\n    return Promise.race(\n      bundleKeys\n        .filter(key => key in bundle)\n        .map(key => loadScript(bundle[key], key))\n    );\n  }\n}\n\nfunction fireRouterEvent(type, detail) {\n  return !window.dispatchEvent(new CustomEvent(\n    `vaadin-router-${type}`,\n    {cancelable: type === 'go', detail}\n  ));\n}\n\nfunction isObject(o) {\n  // guard against null passing the typeof check\n  return typeof o === 'object' && !!o;\n}\n\nfunction isFunction(f) {\n  return typeof f === 'function';\n}\n\nfunction isString(s) {\n  return typeof s === 'string';\n}\n\nfunction getNotFoundError(context) {\n  const error = new Error(log(`Page not found (${context.pathname})`));\n  error.context = context;\n  error.code = 404;\n  return error;\n}\n\nconst notFoundResult = new (class NotFoundResult {})();\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nfunction getAnchorOrigin(anchor) {\n  // IE11: on HTTP and HTTPS the default port is not included into\n  // window.location.origin, so won't include it here either.\n  const port = anchor.port;\n  const protocol = anchor.protocol;\n  const defaultHttp = protocol === 'http:' && port === '80';\n  const defaultHttps = protocol === 'https:' && port === '443';\n  const host = (defaultHttp || defaultHttps)\n    ? anchor.hostname // does not include the port number (e.g. www.example.org)\n    : anchor.host; // does include the port number (e.g. www.example.org:80)\n  return `${protocol}//${host}`;\n}\n\n// The list of checks is not complete:\n//  - SVG support is missing\n//  - the 'rel' attribute is not considered\nfunction vaadinRouterGlobalClickHandler(event) {\n  // ignore the click if the default action is prevented\n  if (event.defaultPrevented) {\n    return;\n  }\n\n  // ignore the click if not with the primary mouse button\n  if (event.button !== 0) {\n    return;\n  }\n\n  // ignore the click if a modifier key is pressed\n  if (event.shiftKey || event.ctrlKey || event.altKey || event.metaKey) {\n    return;\n  }\n\n  // find the <a> element that the click is at (or within)\n  let anchor = event.target;\n  const path = event.composedPath\n    ? event.composedPath()\n    : (event.path || []);\n\n  // FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays\n  // example to check: `for...of` loop here throws the \"Not yet implemented\" error\n  for (let i = 0; i < path.length; i++) {\n    const target = path[i];\n    if (target.nodeName && target.nodeName.toLowerCase() === 'a') {\n      anchor = target;\n      break;\n    }\n  }\n\n  while (anchor && anchor.nodeName.toLowerCase() !== 'a') {\n    anchor = anchor.parentNode;\n  }\n\n  // ignore the click if not at an <a> element\n  if (!anchor || anchor.nodeName.toLowerCase() !== 'a') {\n    return;\n  }\n\n  // ignore the click if the <a> element has a non-default target\n  if (anchor.target && anchor.target.toLowerCase() !== '_self') {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'download' attribute\n  if (anchor.hasAttribute('download')) {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'router-ignore' attribute\n  if (anchor.hasAttribute('router-ignore')) {\n    return;\n  }\n\n  // ignore the click if the target URL is a fragment on the current page\n  if (anchor.pathname === window.location.pathname && anchor.hash !== '') {\n    return;\n  }\n\n  // ignore the click if the target is external to the app\n  // In IE11 HTMLAnchorElement does not have the `origin` property\n  const origin = anchor.origin || getAnchorOrigin(anchor);\n  if (origin !== window.location.origin) {\n    return;\n  }\n\n  // if none of the above, convert the click into a navigation event\n  const {pathname, search, hash} = anchor;\n  if (fireRouterEvent('go', {pathname, search, hash})) {\n    event.preventDefault();\n    // for a click event, the scroll is reset to the top position.\n    if (event && event.type === 'click') {\n      window.scrollTo(0, 0);\n    }\n  }\n}\n\n/**\n * A navigation trigger for Vaadin Router that translated clicks on `<a>` links\n * into Vaadin Router navigation events.\n *\n * Only regular clicks on in-app links are translated (primary mouse button, no\n * modifier keys, the target href is within the app's URL space).\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst CLICK = {\n  activate() {\n    window.document.addEventListener('click', vaadinRouterGlobalClickHandler);\n  },\n\n  inactivate() {\n    window.document.removeEventListener('click', vaadinRouterGlobalClickHandler);\n  }\n};\n\n// PopStateEvent constructor shim\nconst isIE = /Trident/.test(navigator.userAgent);\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nif (isIE && !isFunction(window.PopStateEvent)) {\n  window.PopStateEvent = function(inType, params) {\n    params = params || {};\n    var e = document.createEvent('Event');\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\n    e.state = params.state || null;\n    return e;\n  };\n  window.PopStateEvent.prototype = window.Event.prototype;\n}\n\nfunction vaadinRouterGlobalPopstateHandler(event) {\n  if (event.state === 'vaadin-router-ignore') {\n    return;\n  }\n  const {pathname, search, hash} = window.location;\n  fireRouterEvent('go', {pathname, search, hash});\n}\n\n/**\n * A navigation trigger for Vaadin Router that translates popstate events into\n * Vaadin Router navigation events.\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst POPSTATE = {\n  activate() {\n    window.addEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  },\n\n  inactivate() {\n    window.removeEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  }\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar pathToRegexp_1 = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/';\nvar DEFAULT_DELIMITERS = './';\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER;\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS;\n  var pathEscaped = false;\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      pathEscaped = true;\n      continue\n    }\n\n    var prev = '';\n    var next = str[index];\n    var name = res[2];\n    var capture = res[3];\n    var group = res[4];\n    var modifier = res[5];\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1;\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k];\n        path = path.slice(0, k);\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n      pathEscaped = false;\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = prev || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    });\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index));\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (data, options) {\n    var path = '';\n    var encode = (options && options.encode) || encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined;\n      var segment;\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token);\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment;\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix;\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      });\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {};\n\n  var strict = options.strict;\n  var start = options.start !== false;\n  var end = options.end !== false;\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS;\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');\n  var route = start ? '^' : '';\n  var isEndDelimited = tokens.length === 0;\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern;\n\n      if (keys) keys.push(token);\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?';\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?';\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')';\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?';\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\npathToRegexp_1.parse = parse_1;\npathToRegexp_1.compile = compile_1;\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\n\n/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nconst {hasOwnProperty} = Object.prototype;\nconst cache = new Map();\n// see https://github.com/pillarjs/path-to-regexp/issues/148\ncache.set('|false', {\n  keys: [],\n  pattern: /(?:)/\n});\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction matchPath(routepath, path, exact, parentKeys, parentParams) {\n  exact = !!exact;\n  const cacheKey = `${routepath}|${exact}`;\n  let regexp = cache.get(cacheKey);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp_1(routepath, keys, {\n        end: exact,\n        strict: routepath === ''\n      }),\n    };\n    cache.set(cacheKey, regexp);\n  }\n\n  const m = regexp.pattern.exec(path);\n  if (!m) {\n    return null;\n  }\n\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1];\n    const prop = key.name;\n    const value = m[i];\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];\n      } else {\n        params[prop] = value ? decodeParam(value) : value;\n      }\n    }\n  }\n\n  return {\n    path: m[0],\n    keys: (parentKeys || []).concat(regexp.keys),\n    params,\n  };\n}\n\n/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/**\n * Traverses the routes tree and matches its nodes to the given pathname from\n * the root down to the leaves. Each match consumes a part of the pathname and\n * the matching process continues for as long as there is a matching child\n * route for the remaining part of the pathname.\n *\n * The returned value is a lazily evaluated iterator.\n *\n * The leading \"/\" in a route path matters only for the root of the routes\n * tree (or if all parent routes are \"\"). In all other cases a leading \"/\" in\n * a child route path has no significance.\n *\n * The trailing \"/\" in a _route path_ matters only for the leaves of the\n * routes tree. A leaf route with a trailing \"/\" matches only a pathname that\n * also has a trailing \"/\".\n *\n * The trailing \"/\" in a route path does not affect matching of child routes\n * in any way.\n *\n * The trailing \"/\" in a _pathname_ generally does not matter (except for\n * the case of leaf nodes described above).\n *\n * The \"\" and \"/\" routes have special treatment:\n *  1. as a single route\n *     the \"\" and \"/\" routes match only the \"\" and \"/\" pathnames respectively\n *  2. as a parent in the routes tree\n *     the \"\" route matches any pathname without consuming any part of it\n *     the \"/\" route matches any absolute pathname consuming its leading \"/\"\n *  3. as a leaf in the routes tree\n *     the \"\" and \"/\" routes match only if the entire pathname is consumed by\n *         the parent routes chain. In this case \"\" and \"/\" are equivalent.\n *  4. several directly nested \"\" or \"/\" routes\n *     - directly nested \"\" or \"/\" routes are 'squashed' (i.e. nesting two\n *       \"/\" routes does not require a double \"/\" in the pathname to match)\n *     - if there are only \"\" in the parent routes chain, no part of the\n *       pathname is consumed, and the leading \"/\" in the child routes' paths\n *       remains significant\n *\n * Side effect:\n *   - the routes tree { path: '' } matches only the '' pathname\n *   - the routes tree { path: '', children: [ { path: '' } ] } matches any\n *     pathname (for the tree root)\n *\n * Prefix matching can be enabled also by `children: true`.\n */\nfunction matchRoute(route, pathname, ignoreLeadingSlash, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n  let routepath = route.path || '';\n  if (routepath.charAt(0) === '/') {\n    if (ignoreLeadingSlash) {\n      routepath = routepath.substr(1);\n    }\n    ignoreLeadingSlash = true;\n  }\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return {done: true};\n      }\n\n      const children = route.__children = route.__children || route.children;\n\n      if (!match) {\n        match = matchPath(routepath, pathname, !children, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              keys: match.keys,\n              params: match.params,\n              path: match.path\n            },\n          };\n        }\n      }\n\n      if (match && children) {\n        while (childIndex < children.length) {\n          if (!childMatches) {\n            const childRoute = children[childIndex];\n            childRoute.parent = route;\n\n            let matchedLength = match.path.length;\n            if (matchedLength > 0 && pathname.charAt(matchedLength) === '/') {\n              matchedLength += 1;\n            }\n\n            childMatches = matchRoute(\n              childRoute,\n              pathname.substr(matchedLength),\n              ignoreLeadingSlash,\n              match.keys,\n              match.params\n            );\n          }\n\n          const childMatch = childMatches.next(routeToSkip);\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex++;\n        }\n      }\n\n      return {done: true};\n    },\n  };\n}\n\n/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context) {\n  if (isFunction(context.route.action)) {\n    return context.route.action(context);\n  }\n  return undefined;\n}\n\n/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction generateErrorMessage(currentContext) {\n  let errorMessage = `Path '${currentContext.pathname}' is not properly resolved due to an error.`;\n  const routePath = (currentContext.route || {}).path;\n  if (routePath) {\n    errorMessage += ` Resolution had failed on route: '${routePath}'`;\n  }\n  return errorMessage;\n}\n\nfunction updateChainForRoute(context, match) {\n  const {route, path} = match;\n\n  if (route && !route.__synthetic) {\n    const item = {path, route};\n    if (!context.chain) {\n      context.chain = [];\n    } else {\n      // Discard old items\n      if (route.parent) {\n        let i = context.chain.length;\n        while (i-- && context.chain[i].route && context.chain[i].route !== route.parent) {\n          context.chain.pop();\n        }\n      }\n    }\n    context.chain.push(item);\n  }\n}\n\n/**\n */\nclass Resolver {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.errorHandler = options.errorHandler;\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({resolver: this}, options.context);\n    this.root = Array.isArray(routes) ? {path: '', __children: routes, parent: null, __synthetic: true} : routes;\n    this.root.parent = null;\n  }\n\n  /**\n   * Returns the current list of routes (as a shallow copy). Adding / removing\n   * routes to / from the returned array does not affect the routing config,\n   * but modifying the route objects does.\n   *\n   * @return {!Array<!Router.Route>}\n   */\n  getRoutes() {\n    return [...this.root.__children];\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one).\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   */\n  setRoutes(routes) {\n    ensureRoutes(routes);\n    const newRoutes = [...toArray(routes)];\n    this.root.__children = newRoutes;\n  }\n\n  /**\n   * Appends one or several routes to the routing config and returns the\n   * effective routing config after the operation.\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   * @return {!Array<!Router.Route>}\n   * @protected\n   */\n  addRoutes(routes) {\n    ensureRoutes(routes);\n    this.root.__children.push(...toArray(routes));\n    return this.getRoutes();\n  }\n\n  /**\n   * Removes all existing routes from the routing config.\n   */\n  removeRoutes() {\n    this.setRoutes([]);\n  }\n\n  /**\n   * Asynchronously resolves the given pathname, i.e. finds all routes matching\n   * the pathname and tries resolving them one after another in the order they\n   * are listed in the routes config until the first non-null result.\n   *\n   * Returns a promise that is fulfilled with the return value of an object that consists of the first\n   * route handler result that returns something other than `null` or `undefined` and context used to get this result.\n   *\n   * If no route handlers return a non-null result, or if no route matches the\n   * given pathname the returned promise is rejected with a 'page not found'\n   * `Error`.\n   *\n   * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to\n   *    resolve or a context object with a `pathname` property and other\n   *    properties to pass to the route resolver functions.\n   * @return {!Promise<any>}\n   */\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      isString(pathnameOrContext) ? {pathname: pathnameOrContext} : pathnameOrContext\n    );\n    const match = matchRoute(\n      this.root,\n      this.__normalizePathname(context.pathname),\n      this.baseUrl\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n    let currentContext = context;\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route;\n      matches = nextMatches || match.next(routeToSkip);\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(notFoundResult);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(getNotFoundError(context));\n      }\n\n      currentContext = Object.assign(\n        currentContext\n          ? {chain: (currentContext.chain ? currentContext.chain.slice(0) : [])}\n          : {},\n        context,\n        matches.value\n      );\n      updateChainForRoute(currentContext, matches.value);\n\n      return Promise.resolve(resolve(currentContext)).then(resolution => {\n        if (resolution !== null && resolution !== undefined && resolution !== notFoundResult) {\n          currentContext.result = resolution.result || resolution;\n          return currentContext;\n        }\n        return next(resume, parent, resolution);\n      });\n    }\n\n    context.next = next;\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        const errorMessage = generateErrorMessage(currentContext);\n        if (!error) {\n          error = new Error(errorMessage);\n        } else {\n          console.warn(errorMessage);\n        }\n        error.context = error.context || currentContext;\n        // DOMException has its own code which is read-only\n        if (!(error instanceof DOMException)) {\n          error.code = error.code || 500;\n        }\n        if (this.errorHandler) {\n          currentContext.result = this.errorHandler(error);\n          return currentContext;\n        }\n        throw error;\n      });\n  }\n\n  /**\n   * URL constructor polyfill hook. Creates and returns an URL instance.\n   */\n  static __createUrl(url, base) {\n    return new URL(url, base);\n  }\n\n  /**\n   * If the baseUrl property is set, transforms the baseUrl and returns the full\n   * actual `base` string for using in the `new URL(path, base);` and for\n   * prepernding the paths with. The returned base ends with a trailing slash.\n   *\n   * Otherwise, returns empty string.\n   */\n  get __effectiveBaseUrl() {\n    return this.baseUrl\n      ? this.constructor.__createUrl(\n        this.baseUrl,\n        document.baseURI || document.URL\n      ).href.replace(/[^\\/]*$/, '')\n      : '';\n  }\n\n  /**\n   * If the baseUrl is set, matches the pathname with the router’s baseUrl,\n   * and returns the local pathname with the baseUrl stripped out.\n   *\n   * If the pathname does not match the baseUrl, returns undefined.\n   *\n   * If the `baseUrl` is not set, returns the unmodified pathname argument.\n   */\n  __normalizePathname(pathname) {\n    if (!this.baseUrl) {\n      // No base URL, no need to transform the pathname.\n      return pathname;\n    }\n\n    const base = this.__effectiveBaseUrl;\n    const normalizedUrl = this.constructor.__createUrl(pathname, base).href;\n    if (normalizedUrl.slice(0, base.length) === base) {\n      return normalizedUrl.slice(base.length);\n    }\n  }\n}\n\nResolver.pathToRegexp = pathToRegexp_1;\n\n/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nconst {pathToRegexp: pathToRegexp$1} = Resolver;\nconst cache$1 = new Map();\n\nfunction cacheRoutes(routesByName, route, routes) {\n  const name = route.name || route.component;\n  if (name) {\n    if (routesByName.has(name)) {\n      routesByName.get(name).push(route);\n    } else {\n      routesByName.set(name, [route]);\n    }\n  }\n\n  if (Array.isArray(routes)) {\n    for (let i = 0; i < routes.length; i++) {\n      const childRoute = routes[i];\n      childRoute.parent = route;\n      cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);\n    }\n  }\n}\n\nfunction getRouteByName(routesByName, routeName) {\n  const routes = routesByName.get(routeName);\n  if (routes && routes.length > 1) {\n    throw new Error(\n      `Duplicate route with name \"${routeName}\".`\n      + ` Try seting unique 'name' route properties.`\n    );\n  }\n  return routes && routes[0];\n}\n\nfunction getRoutePath(route) {\n  let path = route.path;\n  path = Array.isArray(path) ? path[0] : path;\n  return path !== undefined ? path : '';\n}\n\nfunction generateUrls(router, options = {}) {\n  if (!(router instanceof Resolver)) {\n    throw new TypeError('An instance of Resolver is expected');\n  }\n\n  const routesByName = new Map();\n\n  return (routeName, params) => {\n    let route = getRouteByName(routesByName, routeName);\n    if (!route) {\n      routesByName.clear(); // clear cache\n      cacheRoutes(routesByName, router.root, router.root.__children);\n\n      route = getRouteByName(routesByName, routeName);\n      if (!route) {\n        throw new Error(`Route \"${routeName}\" not found`);\n      }\n    }\n\n    let regexp = cache$1.get(route.fullPath);\n    if (!regexp) {\n      let fullPath = getRoutePath(route);\n      let rt = route.parent;\n      while (rt) {\n        const path = getRoutePath(rt);\n        if (path) {\n          fullPath = path.replace(/\\/$/, '') + '/' + fullPath.replace(/^\\//, '');\n        }\n        rt = rt.parent;\n      }\n      const tokens = pathToRegexp$1.parse(fullPath);\n      const toPath = pathToRegexp$1.tokensToFunction(tokens);\n      const keys = Object.create(null);\n      for (let i = 0; i < tokens.length; i++) {\n        if (!isString(tokens[i])) {\n          keys[tokens[i].name] = true;\n        }\n      }\n      regexp = {toPath, keys};\n      cache$1.set(fullPath, regexp);\n      route.fullPath = fullPath;\n    }\n\n    let url = regexp.toPath(params, options) || '/';\n\n    if (options.stringifyQueryParams && params) {\n      const queryParams = {};\n      const keys = Object.keys(params);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (!regexp.keys[key]) {\n          queryParams[key] = params[key];\n        }\n      }\n      const query = options.stringifyQueryParams(queryParams);\n      if (query) {\n        url += query.charAt(0) === '?' ? query : `?${query}`;\n      }\n    }\n\n    return url;\n  };\n}\n\n/**\n * @typedef NavigationTrigger\n * @type {object}\n * @property {function()} activate\n * @property {function()} inactivate\n */\n\n/** @type {Array<NavigationTrigger>} */\nlet triggers = [];\n\nfunction setNavigationTriggers(newTriggers) {\n  triggers.forEach(trigger => trigger.inactivate());\n\n  newTriggers.forEach(trigger => trigger.activate());\n\n  triggers = newTriggers;\n}\n\nconst willAnimate = elem => {\n  const name = getComputedStyle(elem).getPropertyValue('animation-name');\n  return name && name !== 'none';\n};\n\nconst waitForAnimation = (elem, cb) => {\n  const listener = () => {\n    elem.removeEventListener('animationend', listener);\n    cb();\n  };\n  elem.addEventListener('animationend', listener);\n};\n\nfunction animate(elem, className) {\n  elem.classList.add(className);\n\n  return new Promise(resolve => {\n    if (willAnimate(elem)) {\n      const rect = elem.getBoundingClientRect();\n      const size = `height: ${rect.bottom - rect.top}px; width: ${rect.right - rect.left}px`;\n      elem.setAttribute('style', `position: absolute; ${size}`);\n      waitForAnimation(elem, () => {\n        elem.classList.remove(className);\n        elem.removeAttribute('style');\n        resolve();\n      });\n    } else {\n      elem.classList.remove(className);\n      resolve();\n    }\n  });\n}\n\nconst MAX_REDIRECT_COUNT = 256;\n\nfunction isResultNotEmpty(result) {\n  return result !== null && result !== undefined;\n}\n\nfunction copyContextWithoutNext(context) {\n  const copy = Object.assign({}, context);\n  delete copy.next;\n  return copy;\n}\n\nfunction createLocation({pathname = '', search = '', hash = '', chain = [], params = {}, redirectFrom, resolver}, route) {\n  const routes = chain.map(item => item.route);\n  return {\n    baseUrl: resolver && resolver.baseUrl || '',\n    pathname,\n    search,\n    hash,\n    routes,\n    route: route || routes.length && routes[routes.length - 1] || null,\n    params,\n    redirectFrom,\n    getUrl: (userParams = {}) => getPathnameForRouter(\n      Router.pathToRegexp.compile(\n        getMatchedPath(routes)\n      )(Object.assign({}, params, userParams)),\n      resolver\n    )\n  };\n}\n\nfunction createRedirect(context, pathname) {\n  const params = Object.assign({}, context.params);\n  return {\n    redirect: {\n      pathname,\n      from: context.pathname,\n      params\n    }\n  };\n}\n\nfunction renderElement(context, element) {\n  element.location = createLocation(context);\n  const index = context.chain.map(item => item.route).indexOf(context.route);\n  context.chain[index].element = element;\n  return element;\n}\n\nfunction runCallbackIfPossible(callback, args, thisArg) {\n  if (isFunction(callback)) {\n    return callback.apply(thisArg, args);\n  }\n}\n\nfunction amend(amendmentFunction, args, element) {\n  return amendmentResult => {\n    if (amendmentResult && (amendmentResult.cancel || amendmentResult.redirect)) {\n      return amendmentResult;\n    }\n\n    if (element) {\n      return runCallbackIfPossible(element[amendmentFunction], args, element);\n    }\n  };\n}\n\nfunction processNewChildren(newChildren, route) {\n  if (!Array.isArray(newChildren) && !isObject(newChildren)) {\n    throw new Error(\n      log(\n        `Incorrect \"children\" value for the route ${route.path}: expected array or object, but got ${newChildren}`\n      )\n    );\n  }\n\n  route.__children = [];\n  const childRoutes = toArray(newChildren);\n  for (let i = 0; i < childRoutes.length; i++) {\n    ensureRoute(childRoutes[i]);\n    route.__children.push(childRoutes[i]);\n  }\n}\n\nfunction removeDomNodes(nodes) {\n  if (nodes && nodes.length) {\n    const parent = nodes[0].parentNode;\n    for (let i = 0; i < nodes.length; i++) {\n      parent.removeChild(nodes[i]);\n    }\n  }\n}\n\nfunction getPathnameForRouter(pathname, router) {\n  const base = router.__effectiveBaseUrl;\n  return base\n    ? router.constructor.__createUrl(pathname.replace(/^\\//, ''), base).pathname\n    : pathname;\n}\n\nfunction getMatchedPath(chain) {\n  return chain.map(item => item.path).reduce((a, b) => {\n    if (b.length) {\n      return a.replace(/\\/$/, '') + '/' + b.replace(/^\\//, '');\n    }\n    return a;\n  }, '');\n}\n\n/**\n * A simple client-side router for single-page applications. It uses\n * express-style middleware and has a first-class support for Web Components and\n * lazy-loading. Works great in Polymer and non-Polymer apps.\n *\n * Use `new Router(outlet, options)` to create a new Router instance.\n *\n * * The `outlet` parameter is a reference to the DOM node to render\n *   the content into.\n *\n * * The `options` parameter is an optional object with options. The following\n *   keys are supported:\n *   * `baseUrl` — the initial value for [\n *     the `baseUrl` property\n *   ](#/classes/Router#property-baseUrl)\n *\n * The Router instance is automatically subscribed to navigation events\n * on `window`.\n *\n * See [Live Examples](#/classes/Router/demos/demo/index.html) for the detailed usage demo and code snippets.\n *\n * See also detailed API docs for the following methods, for the advanced usage:\n *\n * * [setOutlet](#/classes/Router#method-setOutlet) – should be used to configure the outlet.\n * * [setTriggers](#/classes/Router#method-setTriggers) – should be used to configure the navigation events.\n * * [setRoutes](#/classes/Router#method-setRoutes) – should be used to configure the routes.\n *\n * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.\n *\n * @extends Resolver\n * @demo demo/index.html\n * @summary JavaScript class that renders different DOM content depending on\n *    a given path. It can re-render when triggered or automatically on\n *    'popstate' and / or 'click' events.\n */\nclass Router extends Resolver {\n\n  /**\n   * Creates a new Router instance with a given outlet, and\n   * automatically subscribes it to navigation events on the `window`.\n   * Using a constructor argument or a setter for outlet is equivalent:\n   *\n   * ```\n   * const router = new Router();\n   * router.setOutlet(outlet);\n   * ```\n   * @param {?Node=} outlet\n   * @param {?RouterOptions=} options\n   */\n  constructor(outlet, options) {\n    const baseElement = document.head.querySelector('base');\n    const baseHref = baseElement && baseElement.getAttribute('href');\n    super([], Object.assign({\n      // Default options\n      baseUrl: baseHref && Resolver.__createUrl(baseHref, document.URL).pathname.replace(/[^\\/]*$/, '')\n    }, options));\n\n    this.resolveRoute = context => this.__resolveRoute(context);\n\n    const triggers = Router.NavigationTrigger;\n    Router.setTriggers.apply(Router, Object.keys(triggers).map(key => triggers[key]));\n\n    /**\n     * The base URL for all routes in the router instance. By default,\n     * if the base element exists in the `<head>`, vaadin-router\n     * takes the `<base href>` attribute value, resolves against current `document.URL`\n     * and gets the `pathname` from the result.\n     *\n     * @public\n     * @type {string}\n     */\n    this.baseUrl;\n\n    /**\n     * A promise that is settled after the current render cycle completes. If\n     * there is no render cycle in progress the promise is immediately settled\n     * with the last render cycle result.\n     *\n     * @public\n     * @type {!Promise<!RouterLocation>}\n     */\n    this.ready;\n    this.ready = Promise.resolve(outlet);\n\n    /**\n     * Contains read-only information about the current router location:\n     * pathname, active routes, parameters. See the\n     * [Location type declaration](#/classes/RouterLocation)\n     * for more details.\n     *\n     * @public\n     * @type {!RouterLocation}\n     */\n    this.location;\n    this.location = createLocation({resolver: this});\n\n    this.__lastStartedRenderId = 0;\n    this.__navigationEventHandler = this.__onNavigationEvent.bind(this);\n    this.setOutlet(outlet);\n    this.subscribe();\n    // Using WeakMap instead of WeakSet because WeakSet is not supported by IE11\n    this.__createdByRouter = new WeakMap();\n    this.__addedByRouter = new WeakMap();\n  }\n\n  __resolveRoute(context) {\n    const route = context.route;\n\n    let callbacks = Promise.resolve();\n\n    if (isFunction(route.children)) {\n      callbacks = callbacks\n        .then(() => route.children(copyContextWithoutNext(context)))\n        .then(children => {\n          // The route.children() callback might have re-written the\n          // route.children property instead of returning a value\n          if (!isResultNotEmpty(children) && !isFunction(route.children)) {\n            children = route.children;\n          }\n          processNewChildren(children, route);\n        });\n    }\n\n    const commands = {\n      redirect: path => createRedirect(context, path),\n      component: (component) => {\n        const element = document.createElement(component);\n        this.__createdByRouter.set(element, true);\n        return element;\n      }\n    };\n\n    return callbacks\n      .then(() => {\n        if (this.__isLatestRender(context)) {\n          return runCallbackIfPossible(route.action, [context, commands], route);\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          // Actions like `() => import('my-view.js')` are not expected to\n          // end the resolution, despite the result is not empty. Checking\n          // the result with a whitelist of values that end the resolution.\n          if (result instanceof HTMLElement ||\n              result.redirect ||\n              result === notFoundResult) {\n            return result;\n          }\n        }\n\n        if (isString(route.redirect)) {\n          return commands.redirect(route.redirect);\n        }\n\n        if (route.bundle) {\n          return loadBundle(route.bundle)\n            .then(() => {}, () => {\n              throw new Error(log(`Bundle not found: ${route.bundle}. Check if the file name is correct`));\n            });\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          return result;\n        }\n        if (isString(route.component)) {\n          return commands.component(route.component);\n        }\n      });\n  }\n\n  /**\n   * Sets the router outlet (the DOM node where the content for the current\n   * route is inserted). Any content pre-existing in the router outlet is\n   * removed at the end of each render pass.\n   *\n   * NOTE: this method is automatically invoked first time when creating a new Router instance.\n   *\n   * @param {?Node} outlet the DOM node where the content for the current route\n   *     is inserted.\n   */\n  setOutlet(outlet) {\n    if (outlet) {\n      this.__ensureOutlet(outlet);\n    }\n    this.__outlet = outlet;\n  }\n\n  /**\n   * Returns the current router outlet. The initial value is `undefined`.\n   *\n   * @return {?Node} the current router outlet (or `undefined`)\n   */\n  getOutlet() {\n    return this.__outlet;\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one) and triggers a\n   * navigation event so that the router outlet is refreshed according to the\n   * current `window.location` and the new routing config.\n   *\n   * Each route object may have the following properties, listed here in the processing order:\n   * * `path` – the route path (relative to the parent route if any) in the\n   * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   *\n   * * `children` – an array of nested routes or a function that provides this\n   * array at the render time. The function can be synchronous or asynchronous:\n   * in the latter case the render is delayed until the returned promise is\n   * resolved. The `children` function is executed every time when this route is\n   * being rendered. This allows for dynamic route structures (e.g. backend-defined),\n   * but it might have a performance impact as well. In order to avoid calling\n   * the function on subsequent renders, you can override the `children` property\n   * of the route object and save the calculated array there\n   * (via `context.route.children = [ route1, route2, ...];`).\n   * Parent routes are fully resolved before resolving the children. Children\n   * 'path' values are relative to the parent ones.\n   *\n   * * `action` – the action that is executed before the route is resolved.\n   * The value for this property should be a function, accepting `context`\n   * and `commands` parameters described below. If present, this function is\n   * always invoked first, disregarding of the other properties' presence.\n   * The action can return a result directly or within a `Promise`, which\n   * resolves to the result. If the action result is an `HTMLElement` instance,\n   * a `commands.component(name)` result, a `commands.redirect(path)` result,\n   * or a `context.next()` result, the current route resolution is finished,\n   * and other route config properties are ignored.\n   * See also **Route Actions** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.\n   * The target route should also be defined.\n   * See also **Redirects** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,\n   * or the object with \"module\" and \"nomodule\" keys referring to different bundles.\n   * Each bundle is only loaded once. If \"module\" and \"nomodule\" are set, only one bundle is loaded,\n   * depending on whether the browser supports ES modules or not.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * Any error, e.g. 404 while loading bundle will cause route resolution to throw.\n   * See also **Code Splitting** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `component` – the tag name of the Web Component to resolve the route to.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * If route contains the `component` property (or an action that return a component)\n   * and its child route also contains the `component` property, child route's component\n   * will be rendered as a light dom child of a parent component.\n   *\n   * * `name` – the string name of the route to use in the\n   * [`router.urlForName(name, params)`](#/classes/Router#method-urlForName)\n   * navigation helper method.\n   *\n   * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback\n   * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function\n   * because arrow functions do not have their own `this` reference.\n   *\n   * `context` object that is passed to `action` function holds the following properties:\n   * * `context.pathname` – string with the pathname being resolved\n   *\n   * * `context.search` – search query string\n   *\n   * * `context.hash` – hash string\n   *\n   * * `context.params` – object with route parameters\n   *\n   * * `context.route` – object that holds the route that is currently being rendered.\n   *\n   * * `context.next()` – function for asynchronously getting the next route\n   * contents from the resolution chain (if any)\n   *\n   * `commands` object that is passed to `action` function has\n   * the following methods:\n   *\n   * * `commands.redirect(path)` – function that creates a redirect data\n   * for the path specified.\n   *\n   * * `commands.component(component)` – function that creates a new HTMLElement\n   * with current context. Note: the component created by this function is reused if visiting the same path twice in row.\n   *\n   *\n   * @param {!Array<!Route>|!Route} routes a single route or an array of those\n   * @param {?boolean} skipRender configure the router but skip rendering the\n   *     route corresponding to the current `window.location` values\n   *\n   * @return {!Promise<!Node>}\n   */\n  setRoutes(routes, skipRender = false) {\n    this.__previousContext = undefined;\n    this.__urlForName = undefined;\n    super.setRoutes(routes);\n    if (!skipRender) {\n      this.__onNavigationEvent();\n    }\n    return this.ready;\n  }\n\n  /**\n   * Asynchronously resolves the given pathname and renders the resolved route\n   * component into the router outlet. If no router outlet is set at the time of\n   * calling this method, or at the time when the route resolution is completed,\n   * a `TypeError` is thrown.\n   *\n   * Returns a promise that is fulfilled with the router outlet DOM Node after\n   * the route component is created and inserted into the router outlet, or\n   * rejected if no route matches the given path.\n   *\n   * If another render pass is started before the previous one is completed, the\n   * result of the previous render pass is ignored.\n   *\n   * @param {!string|!{pathname: !string, search: ?string, hash: ?string}} pathnameOrContext\n   *    the pathname to render or a context object with a `pathname` property,\n   *    optional `search` and `hash` properties, and other properties\n   *    to pass to the resolver.\n   * @param {boolean=} shouldUpdateHistory\n   *    update browser history with the rendered location\n   * @return {!Promise<!Node>}\n   */\n  render(pathnameOrContext, shouldUpdateHistory) {\n    const renderId = ++this.__lastStartedRenderId;\n    const context = Object.assign(\n      {\n        search: '',\n        hash: ''\n      },\n      isString(pathnameOrContext)\n        ? {pathname: pathnameOrContext}\n        : pathnameOrContext,\n      {\n        __renderId: renderId\n      }\n    );\n\n    // Find the first route that resolves to a non-empty result\n    this.ready = this.resolve(context)\n\n      // Process the result of this.resolve() and handle all special commands:\n      // (redirect / prevent / component). If the result is a 'component',\n      // then go deeper and build the entire chain of nested components matching\n      // the pathname. Also call all 'on before' callbacks along the way.\n      .then(context => this.__fullyResolveChain(context))\n\n      .then(context => {\n        if (this.__isLatestRender(context)) {\n          const previousContext = this.__previousContext;\n\n          // Check if the render was prevented and make an early return in that case\n          if (context === previousContext) {\n            // Replace the history with the previous context\n            // to make sure the URL stays the same.\n            this.__updateBrowserHistory(previousContext, true);\n            return this.location;\n          }\n\n          this.location = createLocation(context);\n\n          if (shouldUpdateHistory) {\n            // Replace only if first render redirects, so that we don’t leave\n            // the redirecting record in the history\n            this.__updateBrowserHistory(context, renderId === 1);\n          }\n\n          fireRouterEvent('location-changed', {router: this, location: this.location});\n\n          // Skip detaching/re-attaching there are no render changes\n          if (context.__skipAttach) {\n            this.__copyUnchangedElements(context, previousContext);\n            this.__previousContext = context;\n            return this.location;\n          }\n\n          this.__addAppearingContent(context, previousContext);\n          const animationDone = this.__animateIfNeeded(context);\n\n          this.__runOnAfterEnterCallbacks(context);\n          this.__runOnAfterLeaveCallbacks(context, previousContext);\n\n          return animationDone.then(() => {\n            if (this.__isLatestRender(context)) {\n              // If there is another render pass started after this one,\n              // the 'disappearing content' would be removed when the other\n              // render pass calls `this.__addAppearingContent()`\n              this.__removeDisappearingContent();\n\n              this.__previousContext = context;\n              return this.location;\n            }\n          });\n        }\n      })\n      .catch(error => {\n        if (renderId === this.__lastStartedRenderId) {\n          if (shouldUpdateHistory) {\n            this.__updateBrowserHistory(context);\n          }\n          removeDomNodes(this.__outlet && this.__outlet.children);\n          this.location = createLocation(Object.assign(context, {resolver: this}));\n          fireRouterEvent('error', Object.assign({router: this, error}, context));\n          throw error;\n        }\n      });\n    return this.ready;\n  }\n\n  // `topOfTheChainContextBeforeRedirects` is a context coming from Resolver.resolve().\n  // It would contain a 'redirect' route or the first 'component' route that\n  // matched the pathname. There might be more child 'component' routes to be\n  // resolved and added into the chain. This method would find and add them.\n  // `contextBeforeRedirects` is the context containing such a child component\n  // route. It's only necessary when this method is called recursively (otherwise\n  // it's the same as the 'top of the chain' context).\n  //\n  // Apart from building the chain of child components, this method would also\n  // handle 'redirect' routes, call 'onBefore' callbacks and handle 'prevent'\n  // and 'redirect' callback results.\n  __fullyResolveChain(topOfTheChainContextBeforeRedirects,\n    contextBeforeRedirects = topOfTheChainContextBeforeRedirects) {\n    return this.__findComponentContextAfterAllRedirects(contextBeforeRedirects)\n      // `contextAfterRedirects` is always a context with an `HTMLElement` result\n      // In other cases the promise gets rejected and .then() is not called\n      .then(contextAfterRedirects => {\n        const redirectsHappened = contextAfterRedirects !== contextBeforeRedirects;\n        const topOfTheChainContextAfterRedirects =\n          redirectsHappened ? contextAfterRedirects : topOfTheChainContextBeforeRedirects;\n\n        const matchedPath = getPathnameForRouter(\n          getMatchedPath(contextAfterRedirects.chain),\n          contextAfterRedirects.resolver\n        );\n        const isFound = (matchedPath === contextAfterRedirects.pathname);\n\n        // Recursive method to try matching more child and sibling routes\n        const findNextContextIfAny = (context, parent = context.route, prevResult) => {\n          return context.next(undefined, parent, prevResult).then(nextContext => {\n            if (nextContext === null || nextContext === notFoundResult) {\n              // Next context is not found in children, ...\n              if (isFound) {\n                // ...but original context is already fully matching - use it\n                return context;\n              } else if (parent.parent !== null) {\n                // ...and there is no full match yet - step up to check siblings\n                return findNextContextIfAny(context, parent.parent, nextContext);\n              } else {\n                return nextContext;\n              }\n            }\n\n            return nextContext;\n          });\n        };\n\n        return findNextContextIfAny(contextAfterRedirects).then(nextContext => {\n          if (nextContext === null || nextContext === notFoundResult) {\n            throw getNotFoundError(topOfTheChainContextAfterRedirects);\n          }\n\n          return nextContext\n          && nextContext !== notFoundResult\n          && nextContext !== contextAfterRedirects\n            ? this.__fullyResolveChain(topOfTheChainContextAfterRedirects, nextContext)\n            : this.__amendWithOnBeforeCallbacks(contextAfterRedirects);\n        });\n      });\n  }\n\n  __findComponentContextAfterAllRedirects(context) {\n    const result = context.result;\n    if (result instanceof HTMLElement) {\n      renderElement(context, result);\n      return Promise.resolve(context);\n    } else if (result.redirect) {\n      return this.__redirect(result.redirect, context.__redirectCount, context.__renderId)\n        .then(context => this.__findComponentContextAfterAllRedirects(context));\n    } else if (result instanceof Error) {\n      return Promise.reject(result);\n    } else {\n      return Promise.reject(\n        new Error(\n          log(\n            `Invalid route resolution result for path \"${context.pathname}\". ` +\n            `Expected redirect object or HTML element, but got: \"${logValue(result)}\". ` +\n            `Double check the action return value for the route.`\n          )\n        ));\n    }\n  }\n\n  __amendWithOnBeforeCallbacks(contextWithFullChain) {\n    return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext => {\n      if (amendedContext === this.__previousContext || amendedContext === contextWithFullChain) {\n        return amendedContext;\n      }\n      return this.__fullyResolveChain(amendedContext);\n    });\n  }\n\n  __runOnBeforeCallbacks(newContext) {\n    const previousContext = this.__previousContext || {};\n    const previousChain = previousContext.chain || [];\n    const newChain = newContext.chain;\n\n    let callbacks = Promise.resolve();\n    const prevent = () => ({cancel: true});\n    const redirect = (pathname) => createRedirect(newContext, pathname);\n\n    newContext.__divergedChainIndex = 0;\n    newContext.__skipAttach = false;\n    if (previousChain.length) {\n      for (let i = 0; i < Math.min(previousChain.length, newChain.length); i = ++newContext.__divergedChainIndex) {\n        if (previousChain[i].route !== newChain[i].route\n          || previousChain[i].path !== newChain[i].path && previousChain[i].element !== newChain[i].element\n          || !this.__isReusableElement(previousChain[i].element, newChain[i].element)) {\n          break;\n        }\n      }\n\n      // Skip re-attaching and notifications if element and chain do not change\n      newContext.__skipAttach =\n        // Same route chain\n        newChain.length === previousChain.length && newContext.__divergedChainIndex == newChain.length &&\n        // Same element\n        this.__isReusableElement(newContext.result, previousContext.result);\n\n      if (newContext.__skipAttach) {\n        // execute onBeforeLeave for changed segment element when skipping attach\n        for (let i = newChain.length - 1; i >= 0; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n        // execute onBeforeEnter for changed segment element when skipping attach\n        for (let i = 0; i < newChain.length; i++) {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n        }\n\n      } else {\n        // execute onBeforeLeave when NOT skipping attach\n        for (let i = previousChain.length - 1; i >= newContext.__divergedChainIndex; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n      }\n    }\n    // execute onBeforeEnter when NOT skipping attach\n    if (!newContext.__skipAttach) {\n      for (let i = 0; i < newChain.length; i++) {\n        if (i < newContext.__divergedChainIndex) {\n          if (i < previousChain.length && previousChain[i].element) {\n            previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n          }\n        } else {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          if (newChain[i].element) {\n            newChain[i].element.location = createLocation(newContext, newChain[i].route);\n          }\n        }\n      }\n    }\n    return callbacks.then(amendmentResult => {\n      if (amendmentResult) {\n        if (amendmentResult.cancel) {\n          this.__previousContext.__renderId = newContext.__renderId;\n          return this.__previousContext;\n        }\n        if (amendmentResult.redirect) {\n          return this.__redirect(amendmentResult.redirect, newContext.__redirectCount, newContext.__renderId);\n        }\n      }\n      return newContext;\n    });\n  }\n\n  __runOnBeforeLeaveCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const afterLeaveFunction = amend('onBeforeLeave', [location, commands, this], chainElement.element);\n        return afterLeaveFunction(result);\n      }\n    }).then(result => {\n      if (!(result || {}).redirect) {\n        return result;\n      }\n    });\n  }\n\n  __runOnBeforeEnterCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext, chainElement.route);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const beforeEnterFunction = amend('onBeforeEnter', [location, commands, this], chainElement.element);\n        return beforeEnterFunction(result);\n      }\n    });\n  }\n\n  __isReusableElement(element, otherElement) {\n    if (element && otherElement) {\n      return this.__createdByRouter.get(element) && this.__createdByRouter.get(otherElement)\n        ? element.localName === otherElement.localName\n        : element === otherElement;\n    }\n    return false;\n  }\n\n  __isLatestRender(context) {\n    return context.__renderId === this.__lastStartedRenderId;\n  }\n\n  __redirect(redirectData, counter, renderId) {\n    if (counter > MAX_REDIRECT_COUNT) {\n      throw new Error(log(`Too many redirects when rendering ${redirectData.from}`));\n    }\n\n    return this.resolve({\n      pathname: this.urlForPath(\n        redirectData.pathname,\n        redirectData.params\n      ),\n      redirectFrom: redirectData.from,\n      __redirectCount: (counter || 0) + 1,\n      __renderId: renderId\n    });\n  }\n\n  __ensureOutlet(outlet = this.__outlet) {\n    if (!(outlet instanceof Node)) {\n      throw new TypeError(log(`Expected router outlet to be a valid DOM Node (but got ${outlet})`));\n    }\n  }\n\n  __updateBrowserHistory({pathname, search = '', hash = ''}, replace) {\n    if (window.location.pathname !== pathname\n        || window.location.search !== search\n        || window.location.hash !== hash\n    ) {\n      const changeState = replace ? 'replaceState' : 'pushState';\n      window.history[changeState](null, document.title, pathname + search + hash);\n      window.dispatchEvent(new PopStateEvent('popstate', {state: 'vaadin-router-ignore'}));\n    }\n  }\n\n  __copyUnchangedElements(context, previousContext) {\n    // Find the deepest common parent between the last and the new component\n    // chains. Update references for the unchanged elements in the new chain\n    let deepestCommonParent = this.__outlet;\n    for (let i = 0; i < context.__divergedChainIndex; i++) {\n      const unchangedElement = previousContext && previousContext.chain[i].element;\n      if (unchangedElement) {\n        if (unchangedElement.parentNode === deepestCommonParent) {\n          context.chain[i].element = unchangedElement;\n          deepestCommonParent = unchangedElement;\n        } else {\n          break;\n        }\n      }\n    }\n    return deepestCommonParent;\n  }\n\n  __addAppearingContent(context, previousContext) {\n    this.__ensureOutlet();\n\n    // If the previous 'entering' animation has not completed yet,\n    // stop it and remove that content from the DOM before adding new one.\n    this.__removeAppearingContent();\n\n    // Copy reusable elements from the previousContext to current\n    const deepestCommonParent = this.__copyUnchangedElements(context, previousContext);\n\n    // Keep two lists of DOM elements:\n    //  - those that should be removed once the transition animation is over\n    //  - and those that should remain\n    this.__appearingContent = [];\n    this.__disappearingContent = Array\n      .from(deepestCommonParent.children)\n      .filter(\n        // Only remove layout content that was added by router\n        e => this.__addedByRouter.get(e) &&\n        // Do not remove the result element to avoid flickering\n        e !== context.result);\n\n    // Add new elements (starting after the deepest common parent) to the DOM.\n    // That way only the components that are actually different between the two\n    // locations are added to the DOM (and those that are common remain in the\n    // DOM without first removing and then adding them again).\n    let parentElement = deepestCommonParent;\n    for (let i = context.__divergedChainIndex; i < context.chain.length; i++) {\n      const elementToAdd = context.chain[i].element;\n      if (elementToAdd) {\n        parentElement.appendChild(elementToAdd);\n        this.__addedByRouter.set(elementToAdd, true);\n        if (parentElement === deepestCommonParent) {\n          this.__appearingContent.push(elementToAdd);\n        }\n        parentElement = elementToAdd;\n      }\n    }\n  }\n\n  __removeDisappearingContent() {\n    if (this.__disappearingContent) {\n      removeDomNodes(this.__disappearingContent);\n    }\n    this.__disappearingContent = null;\n    this.__appearingContent = null;\n  }\n\n  __removeAppearingContent() {\n    if (this.__disappearingContent && this.__appearingContent) {\n      removeDomNodes(this.__appearingContent);\n      this.__disappearingContent = null;\n      this.__appearingContent = null;\n    }\n  }\n\n  __runOnAfterLeaveCallbacks(currentContext, targetContext) {\n    if (!targetContext) {\n      return;\n    }\n\n    // REVERSE iteration: from Z to A\n    for (let i = targetContext.chain.length - 1; i >= currentContext.__divergedChainIndex; i--) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = targetContext.chain[i].element;\n      if (!currentComponent) {\n        continue;\n      }\n      try {\n        const location = createLocation(currentContext);\n        runCallbackIfPossible(\n          currentComponent.onAfterLeave,\n          [location, {}, targetContext.resolver],\n          currentComponent);\n      } finally {\n        if (this.__disappearingContent.indexOf(currentComponent) > -1) {\n          removeDomNodes(currentComponent.children);\n        }\n      }\n    }\n  }\n\n  __runOnAfterEnterCallbacks(currentContext) {\n    // forward iteration: from A to Z\n    for (let i = currentContext.__divergedChainIndex; i < currentContext.chain.length; i++) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = currentContext.chain[i].element || {};\n      const location = createLocation(currentContext, currentContext.chain[i].route);\n      runCallbackIfPossible(\n        currentComponent.onAfterEnter,\n        [location, {}, currentContext.resolver],\n        currentComponent);\n    }\n  }\n\n  __animateIfNeeded(context) {\n    const from = (this.__disappearingContent || [])[0];\n    const to = (this.__appearingContent || [])[0];\n    const promises = [];\n\n    const chain = context.chain;\n    let config;\n    for (let i = chain.length; i > 0; i--) {\n      if (chain[i - 1].route.animate) {\n        config = chain[i - 1].route.animate;\n        break;\n      }\n    }\n\n    if (from && to && config) {\n      const leave = isObject(config) && config.leave || 'leaving';\n      const enter = isObject(config) && config.enter || 'entering';\n      promises.push(animate(from, leave));\n      promises.push(animate(to, enter));\n    }\n\n    return Promise.all(promises).then(() => context);\n  }\n\n  /**\n   * Subscribes this instance to navigation events on the `window`.\n   *\n   * NOTE: beware of resource leaks. For as long as a router instance is\n   * subscribed to navigation events, it won't be garbage collected.\n   */\n  subscribe() {\n    window.addEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  /**\n   * Removes the subscription to navigation events created in the `subscribe()`\n   * method.\n   */\n  unsubscribe() {\n    window.removeEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  __onNavigationEvent(event) {\n    const {pathname, search, hash} = event ? event.detail : window.location;\n    if (isString(this.__normalizePathname(pathname))) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n      this.render({pathname, search, hash}, true);\n    }\n  }\n\n  /**\n   * Configures what triggers Router navigation events:\n   *  - `POPSTATE`: popstate events on the current `window`\n   *  - `CLICK`: click events on `<a>` links leading to the current page\n   *\n   * This method is invoked with the pre-configured values when creating a new Router instance.\n   * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.\n   *\n   * See the `router-config.js` for the default navigation triggers config. Based on it, you can\n   * create the own one and only import the triggers you need, instead of pulling in all the code,\n   * e.g. if you want to handle `click` differently.\n   *\n   * See also **Navigation Triggers** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * @param {...NavigationTrigger} triggers\n   */\n  static setTriggers(...triggers) {\n    setNavigationTriggers(triggers);\n  }\n\n  /**\n   * Generates a URL for the route with the given name, optionally performing\n   * substitution of parameters.\n   *\n   * The route is searched in all the Router instances subscribed to\n   * navigation events.\n   *\n   * **Note:** For child route names, only array children are considered.\n   * It is not possible to generate URLs using a name for routes set with\n   * a children function.\n   *\n   * @function urlForName\n   * @param {!string} name the route name or the route’s `component` name.\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForName(name, params) {\n    if (!this.__urlForName) {\n      this.__urlForName = generateUrls(this);\n    }\n    return getPathnameForRouter(\n      this.__urlForName(name, params),\n      this\n    );\n  }\n\n  /**\n   * Generates a URL for the given route path, optionally performing\n   * substitution of parameters.\n   *\n   * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForPath(path, params) {\n    return getPathnameForRouter(\n      Router.pathToRegexp.compile(path)(params),\n      this\n    );\n  }\n\n  /**\n   * Triggers navigation to a new path. Returns a boolean without waiting until\n   * the navigation is complete. Returns `true` if at least one `Router`\n   * has handled the navigation (was subscribed and had `baseUrl` matching\n   * the `path` argument), otherwise returns `false`.\n   *\n   * @param {!string|!{pathname: !string, search: (string|undefined), hash: (string|undefined)}} path\n   *   a new in-app path string, or an URL-like object with `pathname`\n   *   string property, and optional `search` and `hash` string properties.\n   * @return {boolean}\n   */\n  static go(path) {\n    const {pathname, search, hash} = isString(path)\n      ? this.__createUrl(path, 'http://a') // some base to omit origin\n      : path;\n    return fireRouterEvent('go', {pathname, search, hash});\n  }\n}\n\nconst DEV_MODE_CODE_REGEXP =\n  /\\/\\*\\*\\s+vaadin-dev-mode:start([\\s\\S]*)vaadin-dev-mode:end\\s+\\*\\*\\//i;\n\nconst FlowClients = window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients;\n\nfunction isMinified() {\n  function test() {\n    /** vaadin-dev-mode:start\n    return false;\n    vaadin-dev-mode:end **/\n    return true;\n  }\n  return uncommentAndRun(test);\n}\n\nfunction isDevelopmentMode() {\n  try {\n    if (isForcedDevelopmentMode()) {\n      return true;\n    }\n\n    if (!isLocalhost()) {\n      return false;\n    }\n\n    if (FlowClients) {\n      return !isFlowProductionMode();\n    }\n\n    return !isMinified();\n  } catch (e) {\n    // Some error in this code, assume production so no further actions will be taken\n    return false;\n  }\n}\n\nfunction isForcedDevelopmentMode() {\n  return localStorage.getItem(\"vaadin.developmentmode.force\");\n}\n\nfunction isLocalhost() {\n  return ([\"localhost\",\"127.0.0.1\"].indexOf(window.location.hostname) >= 0);\n}\n\nfunction isFlowProductionMode() {\n  if (FlowClients) {\n    const productionModeApps = Object.keys(FlowClients)\n      .map(key => FlowClients[key])\n      .filter(client => client.productionMode);\n    if (productionModeApps.length > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction uncommentAndRun(callback, args) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());\n  if (match) {\n    try {\n      // requires CSP: script-src 'unsafe-eval'\n      callback = new Function(match[1]);\n    } catch (e) {\n      // eat the exception\n      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e);\n    }\n  }\n\n  return callback(args);\n}\n\n// A guard against polymer-modulizer removing the window.Vaadin\n// initialization above.\nwindow['Vaadin'] = window['Vaadin'] || {};\n\n/**\n * Inspects the source code of the given `callback` function for\n * specially-marked _commented_ code. If such commented code is found in the\n * callback source, uncomments and runs that code instead of the callback\n * itself. Otherwise runs the callback as is.\n *\n * The optional arguments are passed into the callback / uncommented code,\n * the result is returned.\n *\n * See the `isMinified()` function source code in this file for an example.\n *\n */\nconst runIfDevelopmentMode = function(callback, args) {\n  if (window.Vaadin.developmentMode) {\n    return uncommentAndRun(callback, args);\n  }\n};\n\nif (window.Vaadin.developmentMode === undefined) {\n  window.Vaadin.developmentMode = isDevelopmentMode();\n}\n\n/* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */\n\nfunction maybeGatherAndSendStats() {\n  /** vaadin-dev-mode:start\n  (function () {\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar getPolymerVersion = function getPolymerVersion() {\n  return window.Polymer && window.Polymer.version;\n};\n\nvar StatisticsGatherer = function () {\n  function StatisticsGatherer(logger) {\n    classCallCheck(this, StatisticsGatherer);\n\n    this.now = new Date().getTime();\n    this.logger = logger;\n  }\n\n  createClass(StatisticsGatherer, [{\n    key: 'frameworkVersionDetectors',\n    value: function frameworkVersionDetectors() {\n      return {\n        'Flow': function Flow() {\n          if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {\n            var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {\n              return window.Vaadin.Flow.clients[key];\n            }).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().flow;\n            });\n            if (flowVersions.length > 0) {\n              return flowVersions[0];\n            }\n          }\n        },\n        'Vaadin Framework': function VaadinFramework() {\n          if (window.vaadin && window.vaadin.clients) {\n            var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().vaadinVersion;\n            });\n            if (frameworkVersions.length > 0) {\n              return frameworkVersions[0];\n            }\n          }\n        },\n        'AngularJs': function AngularJs() {\n          if (window.angular && window.angular.version && window.angular.version) {\n            return window.angular.version.full;\n          }\n        },\n        'Angular': function Angular() {\n          if (window.ng) {\n            var tags = document.querySelectorAll(\"[ng-version]\");\n            if (tags.length > 0) {\n              return tags[0].getAttribute(\"ng-version\");\n            }\n            return \"Unknown\";\n          }\n        },\n        'Backbone.js': function BackboneJs() {\n          if (window.Backbone) {\n            return window.Backbone.VERSION;\n          }\n        },\n        'React': function React() {\n          var reactSelector = '[data-reactroot], [data-reactid]';\n          if (!!document.querySelector(reactSelector)) {\n            // React does not publish the version by default\n            return \"unknown\";\n          }\n        },\n        'Ember': function Ember() {\n          if (window.Em && window.Em.VERSION) {\n            return window.Em.VERSION;\n          } else if (window.Ember && window.Ember.VERSION) {\n            return window.Ember.VERSION;\n          }\n        },\n        'jQuery': function (_jQuery) {\n          function jQuery() {\n            return _jQuery.apply(this, arguments);\n          }\n\n          jQuery.toString = function () {\n            return _jQuery.toString();\n          };\n\n          return jQuery;\n        }(function () {\n          if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {\n            return jQuery.prototype.jquery;\n          }\n        }),\n        'Polymer': function Polymer() {\n          var version = getPolymerVersion();\n          if (version) {\n            return version;\n          }\n        },\n        'LitElement': function LitElement() {\n          var version = window.litElementVersions && window.litElementVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'LitHtml': function LitHtml() {\n          var version = window.litHtmlVersions && window.litHtmlVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'Vue.js': function VueJs() {\n          if (window.Vue) {\n            return window.Vue.version;\n          }\n        }\n      };\n    }\n  }, {\n    key: 'getUsedVaadinElements',\n    value: function getUsedVaadinElements(elements) {\n      var version = getPolymerVersion();\n      var elementClasses = void 0;\n      // NOTE: In case you edit the code here, YOU MUST UPDATE any statistics reporting code in Flow.\n      // Check all locations calling the method getEntries() in\n      // https://github.com/vaadin/flow/blob/master/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatistics.java#L106\n      // Currently it is only used by BootstrapHandler.\n      if (version && version.indexOf('2') === 0) {\n        // Polymer 2: components classes are stored in window.Vaadin\n        elementClasses = Object.keys(window.Vaadin).map(function (c) {\n          return window.Vaadin[c];\n        }).filter(function (c) {\n          return c.is;\n        });\n      } else {\n        // Polymer 3: components classes are stored in window.Vaadin.registrations\n        elementClasses = window.Vaadin.registrations || [];\n      }\n      elementClasses.forEach(function (klass) {\n        var version = klass.version ? klass.version : \"0.0.0\";\n        elements[klass.is] = { version: version };\n      });\n    }\n  }, {\n    key: 'getUsedVaadinThemes',\n    value: function getUsedVaadinThemes(themes) {\n      ['Lumo', 'Material'].forEach(function (themeName) {\n        var theme;\n        var version = getPolymerVersion();\n        if (version && version.indexOf('2') === 0) {\n          // Polymer 2: themes are stored in window.Vaadin\n          theme = window.Vaadin[themeName];\n        } else {\n          // Polymer 3: themes are stored in custom element registry\n          theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');\n        }\n        if (theme && theme.version) {\n          themes[themeName] = { version: theme.version };\n        }\n      });\n    }\n  }, {\n    key: 'getFrameworks',\n    value: function getFrameworks(frameworks) {\n      var detectors = this.frameworkVersionDetectors();\n      Object.keys(detectors).forEach(function (framework) {\n        var detector = detectors[framework];\n        try {\n          var version = detector();\n          if (version) {\n            frameworks[framework] = { version: version };\n          }\n        } catch (e) {}\n      });\n    }\n  }, {\n    key: 'gather',\n    value: function gather(storage) {\n      var storedStats = storage.read();\n      var gatheredStats = {};\n      var types = [\"elements\", \"frameworks\", \"themes\"];\n\n      types.forEach(function (type) {\n        gatheredStats[type] = {};\n        if (!storedStats[type]) {\n          storedStats[type] = {};\n        }\n      });\n\n      var previousStats = JSON.stringify(storedStats);\n\n      this.getUsedVaadinElements(gatheredStats.elements);\n      this.getFrameworks(gatheredStats.frameworks);\n      this.getUsedVaadinThemes(gatheredStats.themes);\n\n      var now = this.now;\n      types.forEach(function (type) {\n        var keys = Object.keys(gatheredStats[type]);\n        keys.forEach(function (key) {\n          if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {\n            storedStats[type][key] = { firstUsed: now };\n          }\n          // Discards any previously logged version number\n          storedStats[type][key].version = gatheredStats[type][key].version;\n          storedStats[type][key].lastUsed = now;\n        });\n      });\n\n      var newStats = JSON.stringify(storedStats);\n      storage.write(newStats);\n      if (newStats != previousStats && Object.keys(storedStats).length > 0) {\n        this.logger.debug(\"New stats: \" + newStats);\n      }\n    }\n  }]);\n  return StatisticsGatherer;\n}();\n\nvar StatisticsStorage = function () {\n  function StatisticsStorage(key) {\n    classCallCheck(this, StatisticsStorage);\n\n    this.key = key;\n  }\n\n  createClass(StatisticsStorage, [{\n    key: 'read',\n    value: function read() {\n      var localStorageStatsString = localStorage.getItem(this.key);\n      try {\n        return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');\n      } catch (e) {\n        return {};\n      }\n    }\n  }, {\n    key: 'write',\n    value: function write(data) {\n      localStorage.setItem(this.key, data);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      localStorage.removeItem(this.key);\n    }\n  }, {\n    key: 'isEmpty',\n    value: function isEmpty() {\n      var storedStats = this.read();\n      var empty = true;\n      Object.keys(storedStats).forEach(function (key) {\n        if (Object.keys(storedStats[key]).length > 0) {\n          empty = false;\n        }\n      });\n\n      return empty;\n    }\n  }]);\n  return StatisticsStorage;\n}();\n\nvar StatisticsSender = function () {\n  function StatisticsSender(url, logger) {\n    classCallCheck(this, StatisticsSender);\n\n    this.url = url;\n    this.logger = logger;\n  }\n\n  createClass(StatisticsSender, [{\n    key: 'send',\n    value: function send(data, errorHandler) {\n      var logger = this.logger;\n\n      if (navigator.onLine === false) {\n        logger.debug(\"Offline, can't send\");\n        errorHandler();\n        return;\n      }\n      logger.debug(\"Sending data to \" + this.url);\n\n      var req = new XMLHttpRequest();\n      req.withCredentials = true;\n      req.addEventListener(\"load\", function () {\n        // Stats sent, nothing more to do\n        logger.debug(\"Response: \" + req.responseText);\n      });\n      req.addEventListener(\"error\", function () {\n        logger.debug(\"Send failed\");\n        errorHandler();\n      });\n      req.addEventListener(\"abort\", function () {\n        logger.debug(\"Send aborted\");\n        errorHandler();\n      });\n      req.open(\"POST\", this.url);\n      req.setRequestHeader(\"Content-Type\", \"application/json\");\n      req.send(data);\n    }\n  }]);\n  return StatisticsSender;\n}();\n\nvar StatisticsLogger = function () {\n  function StatisticsLogger(id) {\n    classCallCheck(this, StatisticsLogger);\n\n    this.id = id;\n  }\n\n  createClass(StatisticsLogger, [{\n    key: '_isDebug',\n    value: function _isDebug() {\n      return localStorage.getItem(\"vaadin.\" + this.id + \".debug\");\n    }\n  }, {\n    key: 'debug',\n    value: function debug(msg) {\n      if (this._isDebug()) {\n        console.info(this.id + \": \" + msg);\n      }\n    }\n  }]);\n  return StatisticsLogger;\n}();\n\nvar UsageStatistics = function () {\n  function UsageStatistics() {\n    classCallCheck(this, UsageStatistics);\n\n    this.now = new Date();\n    this.timeNow = this.now.getTime();\n    this.gatherDelay = 10; // Delay between loading this file and gathering stats\n    this.initialDelay = 24 * 60 * 60;\n\n    this.logger = new StatisticsLogger(\"statistics\");\n    this.storage = new StatisticsStorage(\"vaadin.statistics.basket\");\n    this.gatherer = new StatisticsGatherer(this.logger);\n    this.sender = new StatisticsSender(\"https://tools.vaadin.com/usage-stats/submit\", this.logger);\n  }\n\n  createClass(UsageStatistics, [{\n    key: 'maybeGatherAndSend',\n    value: function maybeGatherAndSend() {\n      var _this = this;\n\n      if (localStorage.getItem(UsageStatistics.optOutKey)) {\n        return;\n      }\n      this.gatherer.gather(this.storage);\n      setTimeout(function () {\n        _this.maybeSend();\n      }, this.gatherDelay * 1000);\n    }\n  }, {\n    key: 'lottery',\n    value: function lottery() {\n      return true;\n    }\n  }, {\n    key: 'currentMonth',\n    value: function currentMonth() {\n      return this.now.getYear() * 12 + this.now.getMonth();\n    }\n  }, {\n    key: 'maybeSend',\n    value: function maybeSend() {\n      var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));\n\n      if (!firstUse) {\n        // Use a grace period to avoid interfering with tests, incognito mode etc\n        firstUse = this.timeNow;\n        localStorage.setItem(UsageStatistics.firstUseKey, firstUse);\n      }\n\n      if (this.timeNow < firstUse + this.initialDelay * 1000) {\n        this.logger.debug(\"No statistics will be sent until the initial delay of \" + this.initialDelay + \"s has passed\");\n        return;\n      }\n      if (this.currentMonth() <= monthProcessed) {\n        this.logger.debug(\"This month has already been processed\");\n        return;\n      }\n      localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());\n      // Use random sampling\n      if (this.lottery()) {\n        this.logger.debug(\"Congratulations, we have a winner!\");\n      } else {\n        this.logger.debug(\"Sorry, no stats from you this time\");\n        return;\n      }\n\n      this.send();\n    }\n  }, {\n    key: 'send',\n    value: function send() {\n      // Ensure we have the latest data\n      this.gatherer.gather(this.storage);\n\n      // Read, send and clean up\n      var data = this.storage.read();\n      data[\"firstUse\"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      data[\"usageStatisticsVersion\"] = UsageStatistics.version;\n      var info = 'This request contains usage statistics gathered from the application running in development mode. \\n\\nStatistics gathering is automatically disabled and excluded from production builds.\\n\\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\\n\\n\\n\\n';\n      var self = this;\n      this.sender.send(info + JSON.stringify(data), function () {\n        // Revert the 'month processed' flag\n        localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);\n      });\n    }\n  }], [{\n    key: 'version',\n    get: function get$1() {\n      return '2.1.0';\n    }\n  }, {\n    key: 'firstUseKey',\n    get: function get$1() {\n      return 'vaadin.statistics.firstuse';\n    }\n  }, {\n    key: 'monthProcessedKey',\n    get: function get$1() {\n      return 'vaadin.statistics.monthProcessed';\n    }\n  }, {\n    key: 'optOutKey',\n    get: function get$1() {\n      return 'vaadin.statistics.optout';\n    }\n  }]);\n  return UsageStatistics;\n}();\n\ntry {\n  window.Vaadin = window.Vaadin || {};\n  window.Vaadin.usageStatsChecker = window.Vaadin.usageStatsChecker || new UsageStatistics();\n  window.Vaadin.usageStatsChecker.maybeGatherAndSend();\n} catch (e) {\n  // Intentionally ignored as this is not a problem in the app being developed\n}\n\n}());\n\n  vaadin-dev-mode:end **/\n}\n\nconst usageStatistics = function() {\n  if (typeof runIfDevelopmentMode === 'function') {\n    return runIfDevelopmentMode(maybeGatherAndSendStats);\n  }\n};\n\nwindow.Vaadin = window.Vaadin || {};\nwindow.Vaadin.registrations = window.Vaadin.registrations || [];\n\nwindow.Vaadin.registrations.push({\n  is: '@vaadin/router',\n  version: '1.7.4',\n});\n\nusageStatistics();\n\nRouter.NavigationTrigger = {POPSTATE, CLICK};\n\nexport { Resolver, Router };\n","export function toArray(objectOrArray) {\n  objectOrArray = objectOrArray || [];\n  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n}\n\nexport function log(msg) {\n  return `[Vaadin.Router] ${msg}`;\n}\n\nexport function logValue(value) {\n  if (typeof value !== 'object') {\n    return String(value);\n  }\n\n  const stringType = Object.prototype.toString.call(value).match(/ (.*)\\]$/)[1];\n  if (stringType === 'Object' || stringType === 'Array') {\n    return `${stringType} ${JSON.stringify(value)}`;\n  } else {\n    return stringType;\n  }\n}\n\nconst MODULE = 'module';\nconst NOMODULE = 'nomodule';\nconst bundleKeys = [MODULE, NOMODULE];\n\nfunction ensureBundle(src) {\n  if (!src.match(/.+\\.[m]?js$/)) {\n    throw new Error(\n      log(`Unsupported type for bundle \"${src}\": .js or .mjs expected.`)\n    );\n  }\n}\n\nexport function ensureRoute(route) {\n  if (!route || !isString(route.path)) {\n    throw new Error(\n      log(`Expected route config to be an object with a \"path\" string property, or an array of such objects`)\n    );\n  }\n\n  const bundle = route.bundle;\n\n  const stringKeys = ['component', 'redirect', 'bundle'];\n  if (\n    !isFunction(route.action) &&\n    !Array.isArray(route.children) &&\n    !isFunction(route.children) &&\n    !isObject(bundle) &&\n    !stringKeys.some(key => isString(route[key]))\n  ) {\n    throw new Error(\n      log(\n        `Expected route config \"${route.path}\" to include either \"${stringKeys.join('\", \"')}\" ` +\n        `or \"action\" function but none found.`\n      )\n    );\n  }\n\n  if (bundle) {\n    if (isString(bundle)) {\n      ensureBundle(bundle);\n    } else if (!bundleKeys.some(key => key in bundle)) {\n      throw new Error(\n        log('Expected route bundle to include either \"' + NOMODULE + '\" or \"' + MODULE + '\" keys, or both')\n      );\n    } else {\n      bundleKeys.forEach(key => key in bundle && ensureBundle(bundle[key]));\n    }\n  }\n\n  if (route.redirect) {\n    ['bundle', 'component'].forEach(overriddenProp => {\n      if (overriddenProp in route) {\n        console.warn(\n          log(\n            `Route config \"${route.path}\" has both \"redirect\" and \"${overriddenProp}\" properties, ` +\n            `and \"redirect\" will always override the latter. Did you mean to only use \"${overriddenProp}\"?`\n          )\n        );\n      }\n    });\n  }\n}\n\nexport function ensureRoutes(routes) {\n  toArray(routes).forEach(route => ensureRoute(route));\n}\n\nfunction loadScript(src, key) {\n  let script = document.head.querySelector('script[src=\"' + src + '\"][async]');\n  if (!script) {\n    script = document.createElement('script');\n    script.setAttribute('src', src);\n    if (key === MODULE) {\n      script.setAttribute('type', MODULE);\n    } else if (key === NOMODULE) {\n      script.setAttribute(NOMODULE, '');\n    }\n    script.async = true;\n  }\n  return new Promise((resolve, reject) => {\n    script.onreadystatechange = script.onload = e => {\n      script.__dynamicImportLoaded = true;\n      resolve(e);\n    };\n    script.onerror = e => {\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      reject(e);\n    };\n    if (script.parentNode === null) {\n      document.head.appendChild(script);\n    } else if (script.__dynamicImportLoaded) {\n      resolve();\n    }\n  });\n}\n\nexport function loadBundle(bundle) {\n  if (isString(bundle)) {\n    return loadScript(bundle);\n  } else {\n    return Promise.race(\n      bundleKeys\n        .filter(key => key in bundle)\n        .map(key => loadScript(bundle[key], key))\n    );\n  }\n}\n\nexport function fireRouterEvent(type, detail) {\n  return !window.dispatchEvent(new CustomEvent(\n    `vaadin-router-${type}`,\n    {cancelable: type === 'go', detail}\n  ));\n}\n\nexport function isObject(o) {\n  // guard against null passing the typeof check\n  return typeof o === 'object' && !!o;\n}\n\nexport function isFunction(f) {\n  return typeof f === 'function';\n}\n\nexport function isString(s) {\n  return typeof s === 'string';\n}\n\nexport function getNotFoundError(context) {\n  const error = new Error(log(`Page not found (${context.pathname})`));\n  error.context = context;\n  error.code = 404;\n  return error;\n}\n\nexport const notFoundResult = new (class NotFoundResult {})();\n","import {fireRouterEvent} from '../utils.js';\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nfunction getAnchorOrigin(anchor) {\n  // IE11: on HTTP and HTTPS the default port is not included into\n  // window.location.origin, so won't include it here either.\n  const port = anchor.port;\n  const protocol = anchor.protocol;\n  const defaultHttp = protocol === 'http:' && port === '80';\n  const defaultHttps = protocol === 'https:' && port === '443';\n  const host = (defaultHttp || defaultHttps)\n    ? anchor.hostname // does not include the port number (e.g. www.example.org)\n    : anchor.host; // does include the port number (e.g. www.example.org:80)\n  return `${protocol}//${host}`;\n}\n\n// The list of checks is not complete:\n//  - SVG support is missing\n//  - the 'rel' attribute is not considered\nfunction vaadinRouterGlobalClickHandler(event) {\n  // ignore the click if the default action is prevented\n  if (event.defaultPrevented) {\n    return;\n  }\n\n  // ignore the click if not with the primary mouse button\n  if (event.button !== 0) {\n    return;\n  }\n\n  // ignore the click if a modifier key is pressed\n  if (event.shiftKey || event.ctrlKey || event.altKey || event.metaKey) {\n    return;\n  }\n\n  // find the <a> element that the click is at (or within)\n  let anchor = event.target;\n  const path = event.composedPath\n    ? event.composedPath()\n    : (event.path || []);\n\n  // FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays\n  // example to check: `for...of` loop here throws the \"Not yet implemented\" error\n  for (let i = 0; i < path.length; i++) {\n    const target = path[i];\n    if (target.nodeName && target.nodeName.toLowerCase() === 'a') {\n      anchor = target;\n      break;\n    }\n  }\n\n  while (anchor && anchor.nodeName.toLowerCase() !== 'a') {\n    anchor = anchor.parentNode;\n  }\n\n  // ignore the click if not at an <a> element\n  if (!anchor || anchor.nodeName.toLowerCase() !== 'a') {\n    return;\n  }\n\n  // ignore the click if the <a> element has a non-default target\n  if (anchor.target && anchor.target.toLowerCase() !== '_self') {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'download' attribute\n  if (anchor.hasAttribute('download')) {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'router-ignore' attribute\n  if (anchor.hasAttribute('router-ignore')) {\n    return;\n  }\n\n  // ignore the click if the target URL is a fragment on the current page\n  if (anchor.pathname === window.location.pathname && anchor.hash !== '') {\n    return;\n  }\n\n  // ignore the click if the target is external to the app\n  // In IE11 HTMLAnchorElement does not have the `origin` property\n  const origin = anchor.origin || getAnchorOrigin(anchor);\n  if (origin !== window.location.origin) {\n    return;\n  }\n\n  // if none of the above, convert the click into a navigation event\n  const {pathname, search, hash} = anchor;\n  if (fireRouterEvent('go', {pathname, search, hash})) {\n    event.preventDefault();\n    // for a click event, the scroll is reset to the top position.\n    if (event && event.type === 'click') {\n      window.scrollTo(0, 0);\n    }\n  }\n}\n\n/**\n * A navigation trigger for Vaadin Router that translated clicks on `<a>` links\n * into Vaadin Router navigation events.\n *\n * Only regular clicks on in-app links are translated (primary mouse button, no\n * modifier keys, the target href is within the app's URL space).\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst CLICK = {\n  activate() {\n    window.document.addEventListener('click', vaadinRouterGlobalClickHandler);\n  },\n\n  inactivate() {\n    window.document.removeEventListener('click', vaadinRouterGlobalClickHandler);\n  }\n};\n\nexport default CLICK;\n","import {fireRouterEvent, isFunction} from '../utils.js';\n\n// PopStateEvent constructor shim\nconst isIE = /Trident/.test(navigator.userAgent);\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nif (isIE && !isFunction(window.PopStateEvent)) {\n  window.PopStateEvent = function(inType, params) {\n    params = params || {};\n    var e = document.createEvent('Event');\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\n    e.state = params.state || null;\n    return e;\n  };\n  window.PopStateEvent.prototype = window.Event.prototype;\n}\n\nfunction vaadinRouterGlobalPopstateHandler(event) {\n  if (event.state === 'vaadin-router-ignore') {\n    return;\n  }\n  const {pathname, search, hash} = window.location;\n  fireRouterEvent('go', {pathname, search, hash});\n}\n\n/**\n * A navigation trigger for Vaadin Router that translates popstate events into\n * Vaadin Router navigation events.\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst POPSTATE = {\n  activate() {\n    window.addEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  },\n\n  inactivate() {\n    window.removeEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  }\n};\n\nexport default POPSTATE;\n","/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n  var isEndDelimited = tokens.length === 0\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from './path-to-regexp.js';\n\nconst {hasOwnProperty} = Object.prototype;\nconst cache = new Map();\n// see https://github.com/pillarjs/path-to-regexp/issues/148\ncache.set('|false', {\n  keys: [],\n  pattern: /(?:)/\n});\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction matchPath(routepath, path, exact, parentKeys, parentParams) {\n  exact = !!exact;\n  const cacheKey = `${routepath}|${exact}`;\n  let regexp = cache.get(cacheKey);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp(routepath, keys, {\n        end: exact,\n        strict: routepath === ''\n      }),\n    };\n    cache.set(cacheKey, regexp);\n  }\n\n  const m = regexp.pattern.exec(path);\n  if (!m) {\n    return null;\n  }\n\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1];\n    const prop = key.name;\n    const value = m[i];\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];\n      } else {\n        params[prop] = value ? decodeParam(value) : value;\n      }\n    }\n  }\n\n  return {\n    path: m[0],\n    keys: (parentKeys || []).concat(regexp.keys),\n    params,\n  };\n}\n\nexport default matchPath;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath.js';\n\n/**\n * Traverses the routes tree and matches its nodes to the given pathname from\n * the root down to the leaves. Each match consumes a part of the pathname and\n * the matching process continues for as long as there is a matching child\n * route for the remaining part of the pathname.\n *\n * The returned value is a lazily evaluated iterator.\n *\n * The leading \"/\" in a route path matters only for the root of the routes\n * tree (or if all parent routes are \"\"). In all other cases a leading \"/\" in\n * a child route path has no significance.\n *\n * The trailing \"/\" in a _route path_ matters only for the leaves of the\n * routes tree. A leaf route with a trailing \"/\" matches only a pathname that\n * also has a trailing \"/\".\n *\n * The trailing \"/\" in a route path does not affect matching of child routes\n * in any way.\n *\n * The trailing \"/\" in a _pathname_ generally does not matter (except for\n * the case of leaf nodes described above).\n *\n * The \"\" and \"/\" routes have special treatment:\n *  1. as a single route\n *     the \"\" and \"/\" routes match only the \"\" and \"/\" pathnames respectively\n *  2. as a parent in the routes tree\n *     the \"\" route matches any pathname without consuming any part of it\n *     the \"/\" route matches any absolute pathname consuming its leading \"/\"\n *  3. as a leaf in the routes tree\n *     the \"\" and \"/\" routes match only if the entire pathname is consumed by\n *         the parent routes chain. In this case \"\" and \"/\" are equivalent.\n *  4. several directly nested \"\" or \"/\" routes\n *     - directly nested \"\" or \"/\" routes are 'squashed' (i.e. nesting two\n *       \"/\" routes does not require a double \"/\" in the pathname to match)\n *     - if there are only \"\" in the parent routes chain, no part of the\n *       pathname is consumed, and the leading \"/\" in the child routes' paths\n *       remains significant\n *\n * Side effect:\n *   - the routes tree { path: '' } matches only the '' pathname\n *   - the routes tree { path: '', children: [ { path: '' } ] } matches any\n *     pathname (for the tree root)\n *\n * Prefix matching can be enabled also by `children: true`.\n */\nfunction matchRoute(route, pathname, ignoreLeadingSlash, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n  let routepath = route.path || '';\n  if (routepath.charAt(0) === '/') {\n    if (ignoreLeadingSlash) {\n      routepath = routepath.substr(1);\n    }\n    ignoreLeadingSlash = true;\n  }\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return {done: true};\n      }\n\n      const children = route.__children = route.__children || route.children;\n\n      if (!match) {\n        match = matchPath(routepath, pathname, !children, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              keys: match.keys,\n              params: match.params,\n              path: match.path\n            },\n          };\n        }\n      }\n\n      if (match && children) {\n        while (childIndex < children.length) {\n          if (!childMatches) {\n            const childRoute = children[childIndex];\n            childRoute.parent = route;\n\n            let matchedLength = match.path.length;\n            if (matchedLength > 0 && pathname.charAt(matchedLength) === '/') {\n              matchedLength += 1;\n            }\n\n            childMatches = matchRoute(\n              childRoute,\n              pathname.substr(matchedLength),\n              ignoreLeadingSlash,\n              match.keys,\n              match.params\n            );\n          }\n\n          const childMatch = childMatches.next(routeToSkip);\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex++;\n        }\n      }\n\n      return {done: true};\n    },\n  };\n}\n\nexport default matchRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport {isFunction} from '../utils.js';\n\nfunction resolveRoute(context) {\n  if (isFunction(context.route.action)) {\n    return context.route.action(context);\n  }\n  return undefined;\n}\n\nexport default resolveRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from './path-to-regexp.js';\nimport matchRoute from './matchRoute.js';\nimport resolveRoute from './resolveRoute.js';\nimport {toArray, ensureRoutes, isString, getNotFoundError, notFoundResult} from '../utils.js';\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction generateErrorMessage(currentContext) {\n  let errorMessage = `Path '${currentContext.pathname}' is not properly resolved due to an error.`;\n  const routePath = (currentContext.route || {}).path;\n  if (routePath) {\n    errorMessage += ` Resolution had failed on route: '${routePath}'`;\n  }\n  return errorMessage;\n}\n\nfunction updateChainForRoute(context, match) {\n  const {route, path} = match;\n\n  if (route && !route.__synthetic) {\n    const item = {path, route};\n    if (!context.chain) {\n      context.chain = [];\n    } else {\n      // Discard old items\n      if (route.parent) {\n        let i = context.chain.length;\n        while (i-- && context.chain[i].route && context.chain[i].route !== route.parent) {\n          context.chain.pop();\n        }\n      }\n    }\n    context.chain.push(item);\n  }\n}\n\n/**\n */\nclass Resolver {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.errorHandler = options.errorHandler;\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({resolver: this}, options.context);\n    this.root = Array.isArray(routes) ? {path: '', __children: routes, parent: null, __synthetic: true} : routes;\n    this.root.parent = null;\n  }\n\n  /**\n   * Returns the current list of routes (as a shallow copy). Adding / removing\n   * routes to / from the returned array does not affect the routing config,\n   * but modifying the route objects does.\n   *\n   * @return {!Array<!Router.Route>}\n   */\n  getRoutes() {\n    return [...this.root.__children];\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one).\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   */\n  setRoutes(routes) {\n    ensureRoutes(routes);\n    const newRoutes = [...toArray(routes)];\n    this.root.__children = newRoutes;\n  }\n\n  /**\n   * Appends one or several routes to the routing config and returns the\n   * effective routing config after the operation.\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   * @return {!Array<!Router.Route>}\n   * @protected\n   */\n  addRoutes(routes) {\n    ensureRoutes(routes);\n    this.root.__children.push(...toArray(routes));\n    return this.getRoutes();\n  }\n\n  /**\n   * Removes all existing routes from the routing config.\n   */\n  removeRoutes() {\n    this.setRoutes([]);\n  }\n\n  /**\n   * Asynchronously resolves the given pathname, i.e. finds all routes matching\n   * the pathname and tries resolving them one after another in the order they\n   * are listed in the routes config until the first non-null result.\n   *\n   * Returns a promise that is fulfilled with the return value of an object that consists of the first\n   * route handler result that returns something other than `null` or `undefined` and context used to get this result.\n   *\n   * If no route handlers return a non-null result, or if no route matches the\n   * given pathname the returned promise is rejected with a 'page not found'\n   * `Error`.\n   *\n   * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to\n   *    resolve or a context object with a `pathname` property and other\n   *    properties to pass to the route resolver functions.\n   * @return {!Promise<any>}\n   */\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      isString(pathnameOrContext) ? {pathname: pathnameOrContext} : pathnameOrContext\n    );\n    const match = matchRoute(\n      this.root,\n      this.__normalizePathname(context.pathname),\n      this.baseUrl\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n    let currentContext = context;\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route;\n      matches = nextMatches || match.next(routeToSkip);\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(notFoundResult);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(getNotFoundError(context));\n      }\n\n      currentContext = Object.assign(\n        currentContext\n          ? {chain: (currentContext.chain ? currentContext.chain.slice(0) : [])}\n          : {},\n        context,\n        matches.value\n      );\n      updateChainForRoute(currentContext, matches.value);\n\n      return Promise.resolve(resolve(currentContext)).then(resolution => {\n        if (resolution !== null && resolution !== undefined && resolution !== notFoundResult) {\n          currentContext.result = resolution.result || resolution;\n          return currentContext;\n        }\n        return next(resume, parent, resolution);\n      });\n    }\n\n    context.next = next;\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        const errorMessage = generateErrorMessage(currentContext);\n        if (!error) {\n          error = new Error(errorMessage);\n        } else {\n          console.warn(errorMessage);\n        }\n        error.context = error.context || currentContext;\n        // DOMException has its own code which is read-only\n        if (!(error instanceof DOMException)) {\n          error.code = error.code || 500;\n        }\n        if (this.errorHandler) {\n          currentContext.result = this.errorHandler(error);\n          return currentContext;\n        }\n        throw error;\n      });\n  }\n\n  /**\n   * URL constructor polyfill hook. Creates and returns an URL instance.\n   */\n  static __createUrl(url, base) {\n    return new URL(url, base);\n  }\n\n  /**\n   * If the baseUrl property is set, transforms the baseUrl and returns the full\n   * actual `base` string for using in the `new URL(path, base);` and for\n   * prepernding the paths with. The returned base ends with a trailing slash.\n   *\n   * Otherwise, returns empty string.\n   */\n  get __effectiveBaseUrl() {\n    return this.baseUrl\n      ? this.constructor.__createUrl(\n        this.baseUrl,\n        document.baseURI || document.URL\n      ).href.replace(/[^\\/]*$/, '')\n      : '';\n  }\n\n  /**\n   * If the baseUrl is set, matches the pathname with the router’s baseUrl,\n   * and returns the local pathname with the baseUrl stripped out.\n   *\n   * If the pathname does not match the baseUrl, returns undefined.\n   *\n   * If the `baseUrl` is not set, returns the unmodified pathname argument.\n   */\n  __normalizePathname(pathname) {\n    if (!this.baseUrl) {\n      // No base URL, no need to transform the pathname.\n      return pathname;\n    }\n\n    const base = this.__effectiveBaseUrl;\n    const normalizedUrl = this.constructor.__createUrl(pathname, base).href;\n    if (normalizedUrl.slice(0, base.length) === base) {\n      return normalizedUrl.slice(base.length);\n    }\n  }\n}\n\nResolver.pathToRegexp = pathToRegexp;\n\nexport default Resolver;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport Resolver from './resolver.js';\nimport {isString} from '../utils.js';\n\nconst {pathToRegexp} = Resolver;\nconst cache = new Map();\n\nfunction cacheRoutes(routesByName, route, routes) {\n  const name = route.name || route.component;\n  if (name) {\n    if (routesByName.has(name)) {\n      routesByName.get(name).push(route);\n    } else {\n      routesByName.set(name, [route]);\n    }\n  }\n\n  if (Array.isArray(routes)) {\n    for (let i = 0; i < routes.length; i++) {\n      const childRoute = routes[i];\n      childRoute.parent = route;\n      cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);\n    }\n  }\n}\n\nfunction getRouteByName(routesByName, routeName) {\n  const routes = routesByName.get(routeName);\n  if (routes && routes.length > 1) {\n    throw new Error(\n      `Duplicate route with name \"${routeName}\".`\n      + ` Try seting unique 'name' route properties.`\n    );\n  }\n  return routes && routes[0];\n}\n\nfunction getRoutePath(route) {\n  let path = route.path;\n  path = Array.isArray(path) ? path[0] : path;\n  return path !== undefined ? path : '';\n}\n\nfunction generateUrls(router, options = {}) {\n  if (!(router instanceof Resolver)) {\n    throw new TypeError('An instance of Resolver is expected');\n  }\n\n  const routesByName = new Map();\n\n  return (routeName, params) => {\n    let route = getRouteByName(routesByName, routeName);\n    if (!route) {\n      routesByName.clear(); // clear cache\n      cacheRoutes(routesByName, router.root, router.root.__children);\n\n      route = getRouteByName(routesByName, routeName);\n      if (!route) {\n        throw new Error(`Route \"${routeName}\" not found`);\n      }\n    }\n\n    let regexp = cache.get(route.fullPath);\n    if (!regexp) {\n      let fullPath = getRoutePath(route);\n      let rt = route.parent;\n      while (rt) {\n        const path = getRoutePath(rt);\n        if (path) {\n          fullPath = path.replace(/\\/$/, '') + '/' + fullPath.replace(/^\\//, '');\n        }\n        rt = rt.parent;\n      }\n      const tokens = pathToRegexp.parse(fullPath);\n      const toPath = pathToRegexp.tokensToFunction(tokens);\n      const keys = Object.create(null);\n      for (let i = 0; i < tokens.length; i++) {\n        if (!isString(tokens[i])) {\n          keys[tokens[i].name] = true;\n        }\n      }\n      regexp = {toPath, keys};\n      cache.set(fullPath, regexp);\n      route.fullPath = fullPath;\n    }\n\n    let url = regexp.toPath(params, options) || '/';\n\n    if (options.stringifyQueryParams && params) {\n      const queryParams = {};\n      const keys = Object.keys(params);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (!regexp.keys[key]) {\n          queryParams[key] = params[key];\n        }\n      }\n      const query = options.stringifyQueryParams(queryParams);\n      if (query) {\n        url += query.charAt(0) === '?' ? query : `?${query}`;\n      }\n    }\n\n    return url;\n  };\n}\n\nexport default generateUrls;\n","/**\n * @typedef NavigationTrigger\n * @type {object}\n * @property {function()} activate\n * @property {function()} inactivate\n */\n\n/** @type {Array<NavigationTrigger>} */\nlet triggers = [];\n\nexport default function setNavigationTriggers(newTriggers) {\n  triggers.forEach(trigger => trigger.inactivate());\n\n  newTriggers.forEach(trigger => trigger.activate());\n\n  triggers = newTriggers;\n}\n","const willAnimate = elem => {\n  const name = getComputedStyle(elem).getPropertyValue('animation-name');\n  return name && name !== 'none';\n};\n\nconst waitForAnimation = (elem, cb) => {\n  const listener = () => {\n    elem.removeEventListener('animationend', listener);\n    cb();\n  };\n  elem.addEventListener('animationend', listener);\n};\n\nfunction animate(elem, className) {\n  elem.classList.add(className);\n\n  return new Promise(resolve => {\n    if (willAnimate(elem)) {\n      const rect = elem.getBoundingClientRect();\n      const size = `height: ${rect.bottom - rect.top}px; width: ${rect.right - rect.left}px`;\n      elem.setAttribute('style', `position: absolute; ${size}`);\n      waitForAnimation(elem, () => {\n        elem.classList.remove(className);\n        elem.removeAttribute('style');\n        resolve();\n      });\n    } else {\n      elem.classList.remove(className);\n      resolve();\n    }\n  });\n}\n\nexport default animate;\n","import Resolver from './resolver/resolver.js';\nimport generateUrls from './resolver/generateUrls.js';\nimport setNavigationTriggers from './triggers/setNavigationTriggers.js';\nimport animate from './transitions/animate.js';\nimport {\n  ensureRoute,\n  fireRouterEvent,\n  loadBundle,\n  log,\n  logValue,\n  toArray,\n  isFunction,\n  isString,\n  isObject,\n  getNotFoundError,\n  notFoundResult\n} from './utils.js';\n\nconst MAX_REDIRECT_COUNT = 256;\n\nfunction isResultNotEmpty(result) {\n  return result !== null && result !== undefined;\n}\n\nfunction copyContextWithoutNext(context) {\n  const copy = Object.assign({}, context);\n  delete copy.next;\n  return copy;\n}\n\nfunction createLocation({pathname = '', search = '', hash = '', chain = [], params = {}, redirectFrom, resolver}, route) {\n  const routes = chain.map(item => item.route);\n  return {\n    baseUrl: resolver && resolver.baseUrl || '',\n    pathname,\n    search,\n    hash,\n    routes,\n    route: route || routes.length && routes[routes.length - 1] || null,\n    params,\n    redirectFrom,\n    getUrl: (userParams = {}) => getPathnameForRouter(\n      Router.pathToRegexp.compile(\n        getMatchedPath(routes)\n      )(Object.assign({}, params, userParams)),\n      resolver\n    )\n  };\n}\n\nfunction createRedirect(context, pathname) {\n  const params = Object.assign({}, context.params);\n  return {\n    redirect: {\n      pathname,\n      from: context.pathname,\n      params\n    }\n  };\n}\n\nfunction renderElement(context, element) {\n  element.location = createLocation(context);\n  const index = context.chain.map(item => item.route).indexOf(context.route);\n  context.chain[index].element = element;\n  return element;\n}\n\nfunction runCallbackIfPossible(callback, args, thisArg) {\n  if (isFunction(callback)) {\n    return callback.apply(thisArg, args);\n  }\n}\n\nfunction amend(amendmentFunction, args, element) {\n  return amendmentResult => {\n    if (amendmentResult && (amendmentResult.cancel || amendmentResult.redirect)) {\n      return amendmentResult;\n    }\n\n    if (element) {\n      return runCallbackIfPossible(element[amendmentFunction], args, element);\n    }\n  };\n}\n\nfunction processNewChildren(newChildren, route) {\n  if (!Array.isArray(newChildren) && !isObject(newChildren)) {\n    throw new Error(\n      log(\n        `Incorrect \"children\" value for the route ${route.path}: expected array or object, but got ${newChildren}`\n      )\n    );\n  }\n\n  route.__children = [];\n  const childRoutes = toArray(newChildren);\n  for (let i = 0; i < childRoutes.length; i++) {\n    ensureRoute(childRoutes[i]);\n    route.__children.push(childRoutes[i]);\n  }\n}\n\nfunction removeDomNodes(nodes) {\n  if (nodes && nodes.length) {\n    const parent = nodes[0].parentNode;\n    for (let i = 0; i < nodes.length; i++) {\n      parent.removeChild(nodes[i]);\n    }\n  }\n}\n\nfunction getPathnameForRouter(pathname, router) {\n  const base = router.__effectiveBaseUrl;\n  return base\n    ? router.constructor.__createUrl(pathname.replace(/^\\//, ''), base).pathname\n    : pathname;\n}\n\nfunction getMatchedPath(chain) {\n  return chain.map(item => item.path).reduce((a, b) => {\n    if (b.length) {\n      return a.replace(/\\/$/, '') + '/' + b.replace(/^\\//, '');\n    }\n    return a;\n  }, '');\n}\n\n/**\n * A simple client-side router for single-page applications. It uses\n * express-style middleware and has a first-class support for Web Components and\n * lazy-loading. Works great in Polymer and non-Polymer apps.\n *\n * Use `new Router(outlet, options)` to create a new Router instance.\n *\n * * The `outlet` parameter is a reference to the DOM node to render\n *   the content into.\n *\n * * The `options` parameter is an optional object with options. The following\n *   keys are supported:\n *   * `baseUrl` — the initial value for [\n *     the `baseUrl` property\n *   ](#/classes/Router#property-baseUrl)\n *\n * The Router instance is automatically subscribed to navigation events\n * on `window`.\n *\n * See [Live Examples](#/classes/Router/demos/demo/index.html) for the detailed usage demo and code snippets.\n *\n * See also detailed API docs for the following methods, for the advanced usage:\n *\n * * [setOutlet](#/classes/Router#method-setOutlet) – should be used to configure the outlet.\n * * [setTriggers](#/classes/Router#method-setTriggers) – should be used to configure the navigation events.\n * * [setRoutes](#/classes/Router#method-setRoutes) – should be used to configure the routes.\n *\n * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.\n *\n * @extends Resolver\n * @demo demo/index.html\n * @summary JavaScript class that renders different DOM content depending on\n *    a given path. It can re-render when triggered or automatically on\n *    'popstate' and / or 'click' events.\n */\nexport class Router extends Resolver {\n\n  /**\n   * Creates a new Router instance with a given outlet, and\n   * automatically subscribes it to navigation events on the `window`.\n   * Using a constructor argument or a setter for outlet is equivalent:\n   *\n   * ```\n   * const router = new Router();\n   * router.setOutlet(outlet);\n   * ```\n   * @param {?Node=} outlet\n   * @param {?RouterOptions=} options\n   */\n  constructor(outlet, options) {\n    const baseElement = document.head.querySelector('base');\n    const baseHref = baseElement && baseElement.getAttribute('href');\n    super([], Object.assign({\n      // Default options\n      baseUrl: baseHref && Resolver.__createUrl(baseHref, document.URL).pathname.replace(/[^\\/]*$/, '')\n    }, options));\n\n    this.resolveRoute = context => this.__resolveRoute(context);\n\n    const triggers = Router.NavigationTrigger;\n    Router.setTriggers.apply(Router, Object.keys(triggers).map(key => triggers[key]));\n\n    /**\n     * The base URL for all routes in the router instance. By default,\n     * if the base element exists in the `<head>`, vaadin-router\n     * takes the `<base href>` attribute value, resolves against current `document.URL`\n     * and gets the `pathname` from the result.\n     *\n     * @public\n     * @type {string}\n     */\n    this.baseUrl;\n\n    /**\n     * A promise that is settled after the current render cycle completes. If\n     * there is no render cycle in progress the promise is immediately settled\n     * with the last render cycle result.\n     *\n     * @public\n     * @type {!Promise<!RouterLocation>}\n     */\n    this.ready;\n    this.ready = Promise.resolve(outlet);\n\n    /**\n     * Contains read-only information about the current router location:\n     * pathname, active routes, parameters. See the\n     * [Location type declaration](#/classes/RouterLocation)\n     * for more details.\n     *\n     * @public\n     * @type {!RouterLocation}\n     */\n    this.location;\n    this.location = createLocation({resolver: this});\n\n    this.__lastStartedRenderId = 0;\n    this.__navigationEventHandler = this.__onNavigationEvent.bind(this);\n    this.setOutlet(outlet);\n    this.subscribe();\n    // Using WeakMap instead of WeakSet because WeakSet is not supported by IE11\n    this.__createdByRouter = new WeakMap();\n    this.__addedByRouter = new WeakMap();\n  }\n\n  __resolveRoute(context) {\n    const route = context.route;\n\n    let callbacks = Promise.resolve();\n\n    if (isFunction(route.children)) {\n      callbacks = callbacks\n        .then(() => route.children(copyContextWithoutNext(context)))\n        .then(children => {\n          // The route.children() callback might have re-written the\n          // route.children property instead of returning a value\n          if (!isResultNotEmpty(children) && !isFunction(route.children)) {\n            children = route.children;\n          }\n          processNewChildren(children, route);\n        });\n    }\n\n    const commands = {\n      redirect: path => createRedirect(context, path),\n      component: (component) => {\n        const element = document.createElement(component);\n        this.__createdByRouter.set(element, true);\n        return element;\n      }\n    };\n\n    return callbacks\n      .then(() => {\n        if (this.__isLatestRender(context)) {\n          return runCallbackIfPossible(route.action, [context, commands], route);\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          // Actions like `() => import('my-view.js')` are not expected to\n          // end the resolution, despite the result is not empty. Checking\n          // the result with a whitelist of values that end the resolution.\n          if (result instanceof HTMLElement ||\n              result.redirect ||\n              result === notFoundResult) {\n            return result;\n          }\n        }\n\n        if (isString(route.redirect)) {\n          return commands.redirect(route.redirect);\n        }\n\n        if (route.bundle) {\n          return loadBundle(route.bundle)\n            .then(() => {}, () => {\n              throw new Error(log(`Bundle not found: ${route.bundle}. Check if the file name is correct`));\n            });\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          return result;\n        }\n        if (isString(route.component)) {\n          return commands.component(route.component);\n        }\n      });\n  }\n\n  /**\n   * Sets the router outlet (the DOM node where the content for the current\n   * route is inserted). Any content pre-existing in the router outlet is\n   * removed at the end of each render pass.\n   *\n   * NOTE: this method is automatically invoked first time when creating a new Router instance.\n   *\n   * @param {?Node} outlet the DOM node where the content for the current route\n   *     is inserted.\n   */\n  setOutlet(outlet) {\n    if (outlet) {\n      this.__ensureOutlet(outlet);\n    }\n    this.__outlet = outlet;\n  }\n\n  /**\n   * Returns the current router outlet. The initial value is `undefined`.\n   *\n   * @return {?Node} the current router outlet (or `undefined`)\n   */\n  getOutlet() {\n    return this.__outlet;\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one) and triggers a\n   * navigation event so that the router outlet is refreshed according to the\n   * current `window.location` and the new routing config.\n   *\n   * Each route object may have the following properties, listed here in the processing order:\n   * * `path` – the route path (relative to the parent route if any) in the\n   * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   *\n   * * `children` – an array of nested routes or a function that provides this\n   * array at the render time. The function can be synchronous or asynchronous:\n   * in the latter case the render is delayed until the returned promise is\n   * resolved. The `children` function is executed every time when this route is\n   * being rendered. This allows for dynamic route structures (e.g. backend-defined),\n   * but it might have a performance impact as well. In order to avoid calling\n   * the function on subsequent renders, you can override the `children` property\n   * of the route object and save the calculated array there\n   * (via `context.route.children = [ route1, route2, ...];`).\n   * Parent routes are fully resolved before resolving the children. Children\n   * 'path' values are relative to the parent ones.\n   *\n   * * `action` – the action that is executed before the route is resolved.\n   * The value for this property should be a function, accepting `context`\n   * and `commands` parameters described below. If present, this function is\n   * always invoked first, disregarding of the other properties' presence.\n   * The action can return a result directly or within a `Promise`, which\n   * resolves to the result. If the action result is an `HTMLElement` instance,\n   * a `commands.component(name)` result, a `commands.redirect(path)` result,\n   * or a `context.next()` result, the current route resolution is finished,\n   * and other route config properties are ignored.\n   * See also **Route Actions** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.\n   * The target route should also be defined.\n   * See also **Redirects** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,\n   * or the object with \"module\" and \"nomodule\" keys referring to different bundles.\n   * Each bundle is only loaded once. If \"module\" and \"nomodule\" are set, only one bundle is loaded,\n   * depending on whether the browser supports ES modules or not.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * Any error, e.g. 404 while loading bundle will cause route resolution to throw.\n   * See also **Code Splitting** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `component` – the tag name of the Web Component to resolve the route to.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * If route contains the `component` property (or an action that return a component)\n   * and its child route also contains the `component` property, child route's component\n   * will be rendered as a light dom child of a parent component.\n   *\n   * * `name` – the string name of the route to use in the\n   * [`router.urlForName(name, params)`](#/classes/Router#method-urlForName)\n   * navigation helper method.\n   *\n   * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback\n   * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function\n   * because arrow functions do not have their own `this` reference.\n   *\n   * `context` object that is passed to `action` function holds the following properties:\n   * * `context.pathname` – string with the pathname being resolved\n   *\n   * * `context.search` – search query string\n   *\n   * * `context.hash` – hash string\n   *\n   * * `context.params` – object with route parameters\n   *\n   * * `context.route` – object that holds the route that is currently being rendered.\n   *\n   * * `context.next()` – function for asynchronously getting the next route\n   * contents from the resolution chain (if any)\n   *\n   * `commands` object that is passed to `action` function has\n   * the following methods:\n   *\n   * * `commands.redirect(path)` – function that creates a redirect data\n   * for the path specified.\n   *\n   * * `commands.component(component)` – function that creates a new HTMLElement\n   * with current context. Note: the component created by this function is reused if visiting the same path twice in row.\n   *\n   *\n   * @param {!Array<!Route>|!Route} routes a single route or an array of those\n   * @param {?boolean} skipRender configure the router but skip rendering the\n   *     route corresponding to the current `window.location` values\n   *\n   * @return {!Promise<!Node>}\n   */\n  setRoutes(routes, skipRender = false) {\n    this.__previousContext = undefined;\n    this.__urlForName = undefined;\n    super.setRoutes(routes);\n    if (!skipRender) {\n      this.__onNavigationEvent();\n    }\n    return this.ready;\n  }\n\n  /**\n   * Asynchronously resolves the given pathname and renders the resolved route\n   * component into the router outlet. If no router outlet is set at the time of\n   * calling this method, or at the time when the route resolution is completed,\n   * a `TypeError` is thrown.\n   *\n   * Returns a promise that is fulfilled with the router outlet DOM Node after\n   * the route component is created and inserted into the router outlet, or\n   * rejected if no route matches the given path.\n   *\n   * If another render pass is started before the previous one is completed, the\n   * result of the previous render pass is ignored.\n   *\n   * @param {!string|!{pathname: !string, search: ?string, hash: ?string}} pathnameOrContext\n   *    the pathname to render or a context object with a `pathname` property,\n   *    optional `search` and `hash` properties, and other properties\n   *    to pass to the resolver.\n   * @param {boolean=} shouldUpdateHistory\n   *    update browser history with the rendered location\n   * @return {!Promise<!Node>}\n   */\n  render(pathnameOrContext, shouldUpdateHistory) {\n    const renderId = ++this.__lastStartedRenderId;\n    const context = Object.assign(\n      {\n        search: '',\n        hash: ''\n      },\n      isString(pathnameOrContext)\n        ? {pathname: pathnameOrContext}\n        : pathnameOrContext,\n      {\n        __renderId: renderId\n      }\n    );\n\n    // Find the first route that resolves to a non-empty result\n    this.ready = this.resolve(context)\n\n      // Process the result of this.resolve() and handle all special commands:\n      // (redirect / prevent / component). If the result is a 'component',\n      // then go deeper and build the entire chain of nested components matching\n      // the pathname. Also call all 'on before' callbacks along the way.\n      .then(context => this.__fullyResolveChain(context))\n\n      .then(context => {\n        if (this.__isLatestRender(context)) {\n          const previousContext = this.__previousContext;\n\n          // Check if the render was prevented and make an early return in that case\n          if (context === previousContext) {\n            // Replace the history with the previous context\n            // to make sure the URL stays the same.\n            this.__updateBrowserHistory(previousContext, true);\n            return this.location;\n          }\n\n          this.location = createLocation(context);\n\n          if (shouldUpdateHistory) {\n            // Replace only if first render redirects, so that we don’t leave\n            // the redirecting record in the history\n            this.__updateBrowserHistory(context, renderId === 1);\n          }\n\n          fireRouterEvent('location-changed', {router: this, location: this.location});\n\n          // Skip detaching/re-attaching there are no render changes\n          if (context.__skipAttach) {\n            this.__copyUnchangedElements(context, previousContext);\n            this.__previousContext = context;\n            return this.location;\n          }\n\n          this.__addAppearingContent(context, previousContext);\n          const animationDone = this.__animateIfNeeded(context);\n\n          this.__runOnAfterEnterCallbacks(context);\n          this.__runOnAfterLeaveCallbacks(context, previousContext);\n\n          return animationDone.then(() => {\n            if (this.__isLatestRender(context)) {\n              // If there is another render pass started after this one,\n              // the 'disappearing content' would be removed when the other\n              // render pass calls `this.__addAppearingContent()`\n              this.__removeDisappearingContent();\n\n              this.__previousContext = context;\n              return this.location;\n            }\n          });\n        }\n      })\n      .catch(error => {\n        if (renderId === this.__lastStartedRenderId) {\n          if (shouldUpdateHistory) {\n            this.__updateBrowserHistory(context);\n          }\n          removeDomNodes(this.__outlet && this.__outlet.children);\n          this.location = createLocation(Object.assign(context, {resolver: this}));\n          fireRouterEvent('error', Object.assign({router: this, error}, context));\n          throw error;\n        }\n      });\n    return this.ready;\n  }\n\n  // `topOfTheChainContextBeforeRedirects` is a context coming from Resolver.resolve().\n  // It would contain a 'redirect' route or the first 'component' route that\n  // matched the pathname. There might be more child 'component' routes to be\n  // resolved and added into the chain. This method would find and add them.\n  // `contextBeforeRedirects` is the context containing such a child component\n  // route. It's only necessary when this method is called recursively (otherwise\n  // it's the same as the 'top of the chain' context).\n  //\n  // Apart from building the chain of child components, this method would also\n  // handle 'redirect' routes, call 'onBefore' callbacks and handle 'prevent'\n  // and 'redirect' callback results.\n  __fullyResolveChain(topOfTheChainContextBeforeRedirects,\n    contextBeforeRedirects = topOfTheChainContextBeforeRedirects) {\n    return this.__findComponentContextAfterAllRedirects(contextBeforeRedirects)\n      // `contextAfterRedirects` is always a context with an `HTMLElement` result\n      // In other cases the promise gets rejected and .then() is not called\n      .then(contextAfterRedirects => {\n        const redirectsHappened = contextAfterRedirects !== contextBeforeRedirects;\n        const topOfTheChainContextAfterRedirects =\n          redirectsHappened ? contextAfterRedirects : topOfTheChainContextBeforeRedirects;\n\n        const matchedPath = getPathnameForRouter(\n          getMatchedPath(contextAfterRedirects.chain),\n          contextAfterRedirects.resolver\n        );\n        const isFound = (matchedPath === contextAfterRedirects.pathname);\n\n        // Recursive method to try matching more child and sibling routes\n        const findNextContextIfAny = (context, parent = context.route, prevResult) => {\n          return context.next(undefined, parent, prevResult).then(nextContext => {\n            if (nextContext === null || nextContext === notFoundResult) {\n              // Next context is not found in children, ...\n              if (isFound) {\n                // ...but original context is already fully matching - use it\n                return context;\n              } else if (parent.parent !== null) {\n                // ...and there is no full match yet - step up to check siblings\n                return findNextContextIfAny(context, parent.parent, nextContext);\n              } else {\n                return nextContext;\n              }\n            }\n\n            return nextContext;\n          });\n        };\n\n        return findNextContextIfAny(contextAfterRedirects).then(nextContext => {\n          if (nextContext === null || nextContext === notFoundResult) {\n            throw getNotFoundError(topOfTheChainContextAfterRedirects);\n          }\n\n          return nextContext\n          && nextContext !== notFoundResult\n          && nextContext !== contextAfterRedirects\n            ? this.__fullyResolveChain(topOfTheChainContextAfterRedirects, nextContext)\n            : this.__amendWithOnBeforeCallbacks(contextAfterRedirects);\n        });\n      });\n  }\n\n  __findComponentContextAfterAllRedirects(context) {\n    const result = context.result;\n    if (result instanceof HTMLElement) {\n      renderElement(context, result);\n      return Promise.resolve(context);\n    } else if (result.redirect) {\n      return this.__redirect(result.redirect, context.__redirectCount, context.__renderId)\n        .then(context => this.__findComponentContextAfterAllRedirects(context));\n    } else if (result instanceof Error) {\n      return Promise.reject(result);\n    } else {\n      return Promise.reject(\n        new Error(\n          log(\n            `Invalid route resolution result for path \"${context.pathname}\". ` +\n            `Expected redirect object or HTML element, but got: \"${logValue(result)}\". ` +\n            `Double check the action return value for the route.`\n          )\n        ));\n    }\n  }\n\n  __amendWithOnBeforeCallbacks(contextWithFullChain) {\n    return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext => {\n      if (amendedContext === this.__previousContext || amendedContext === contextWithFullChain) {\n        return amendedContext;\n      }\n      return this.__fullyResolveChain(amendedContext);\n    });\n  }\n\n  __runOnBeforeCallbacks(newContext) {\n    const previousContext = this.__previousContext || {};\n    const previousChain = previousContext.chain || [];\n    const newChain = newContext.chain;\n\n    let callbacks = Promise.resolve();\n    const prevent = () => ({cancel: true});\n    const redirect = (pathname) => createRedirect(newContext, pathname);\n\n    newContext.__divergedChainIndex = 0;\n    newContext.__skipAttach = false;\n    if (previousChain.length) {\n      for (let i = 0; i < Math.min(previousChain.length, newChain.length); i = ++newContext.__divergedChainIndex) {\n        if (previousChain[i].route !== newChain[i].route\n          || previousChain[i].path !== newChain[i].path && previousChain[i].element !== newChain[i].element\n          || !this.__isReusableElement(previousChain[i].element, newChain[i].element)) {\n          break;\n        }\n      }\n\n      // Skip re-attaching and notifications if element and chain do not change\n      newContext.__skipAttach =\n        // Same route chain\n        newChain.length === previousChain.length && newContext.__divergedChainIndex == newChain.length &&\n        // Same element\n        this.__isReusableElement(newContext.result, previousContext.result);\n\n      if (newContext.__skipAttach) {\n        // execute onBeforeLeave for changed segment element when skipping attach\n        for (let i = newChain.length - 1; i >= 0; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n        // execute onBeforeEnter for changed segment element when skipping attach\n        for (let i = 0; i < newChain.length; i++) {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n        }\n\n      } else {\n        // execute onBeforeLeave when NOT skipping attach\n        for (let i = previousChain.length - 1; i >= newContext.__divergedChainIndex; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n      }\n    }\n    // execute onBeforeEnter when NOT skipping attach\n    if (!newContext.__skipAttach) {\n      for (let i = 0; i < newChain.length; i++) {\n        if (i < newContext.__divergedChainIndex) {\n          if (i < previousChain.length && previousChain[i].element) {\n            previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n          }\n        } else {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          if (newChain[i].element) {\n            newChain[i].element.location = createLocation(newContext, newChain[i].route);\n          }\n        }\n      }\n    }\n    return callbacks.then(amendmentResult => {\n      if (amendmentResult) {\n        if (amendmentResult.cancel) {\n          this.__previousContext.__renderId = newContext.__renderId;\n          return this.__previousContext;\n        }\n        if (amendmentResult.redirect) {\n          return this.__redirect(amendmentResult.redirect, newContext.__redirectCount, newContext.__renderId);\n        }\n      }\n      return newContext;\n    });\n  }\n\n  __runOnBeforeLeaveCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const afterLeaveFunction = amend('onBeforeLeave', [location, commands, this], chainElement.element);\n        return afterLeaveFunction(result);\n      }\n    }).then(result => {\n      if (!(result || {}).redirect) {\n        return result;\n      }\n    });\n  }\n\n  __runOnBeforeEnterCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext, chainElement.route);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const beforeEnterFunction = amend('onBeforeEnter', [location, commands, this], chainElement.element);\n        return beforeEnterFunction(result);\n      }\n    });\n  }\n\n  __isReusableElement(element, otherElement) {\n    if (element && otherElement) {\n      return this.__createdByRouter.get(element) && this.__createdByRouter.get(otherElement)\n        ? element.localName === otherElement.localName\n        : element === otherElement;\n    }\n    return false;\n  }\n\n  __isLatestRender(context) {\n    return context.__renderId === this.__lastStartedRenderId;\n  }\n\n  __redirect(redirectData, counter, renderId) {\n    if (counter > MAX_REDIRECT_COUNT) {\n      throw new Error(log(`Too many redirects when rendering ${redirectData.from}`));\n    }\n\n    return this.resolve({\n      pathname: this.urlForPath(\n        redirectData.pathname,\n        redirectData.params\n      ),\n      redirectFrom: redirectData.from,\n      __redirectCount: (counter || 0) + 1,\n      __renderId: renderId\n    });\n  }\n\n  __ensureOutlet(outlet = this.__outlet) {\n    if (!(outlet instanceof Node)) {\n      throw new TypeError(log(`Expected router outlet to be a valid DOM Node (but got ${outlet})`));\n    }\n  }\n\n  __updateBrowserHistory({pathname, search = '', hash = ''}, replace) {\n    if (window.location.pathname !== pathname\n        || window.location.search !== search\n        || window.location.hash !== hash\n    ) {\n      const changeState = replace ? 'replaceState' : 'pushState';\n      window.history[changeState](null, document.title, pathname + search + hash);\n      window.dispatchEvent(new PopStateEvent('popstate', {state: 'vaadin-router-ignore'}));\n    }\n  }\n\n  __copyUnchangedElements(context, previousContext) {\n    // Find the deepest common parent between the last and the new component\n    // chains. Update references for the unchanged elements in the new chain\n    let deepestCommonParent = this.__outlet;\n    for (let i = 0; i < context.__divergedChainIndex; i++) {\n      const unchangedElement = previousContext && previousContext.chain[i].element;\n      if (unchangedElement) {\n        if (unchangedElement.parentNode === deepestCommonParent) {\n          context.chain[i].element = unchangedElement;\n          deepestCommonParent = unchangedElement;\n        } else {\n          break;\n        }\n      }\n    }\n    return deepestCommonParent;\n  }\n\n  __addAppearingContent(context, previousContext) {\n    this.__ensureOutlet();\n\n    // If the previous 'entering' animation has not completed yet,\n    // stop it and remove that content from the DOM before adding new one.\n    this.__removeAppearingContent();\n\n    // Copy reusable elements from the previousContext to current\n    const deepestCommonParent = this.__copyUnchangedElements(context, previousContext);\n\n    // Keep two lists of DOM elements:\n    //  - those that should be removed once the transition animation is over\n    //  - and those that should remain\n    this.__appearingContent = [];\n    this.__disappearingContent = Array\n      .from(deepestCommonParent.children)\n      .filter(\n        // Only remove layout content that was added by router\n        e => this.__addedByRouter.get(e) &&\n        // Do not remove the result element to avoid flickering\n        e !== context.result);\n\n    // Add new elements (starting after the deepest common parent) to the DOM.\n    // That way only the components that are actually different between the two\n    // locations are added to the DOM (and those that are common remain in the\n    // DOM without first removing and then adding them again).\n    let parentElement = deepestCommonParent;\n    for (let i = context.__divergedChainIndex; i < context.chain.length; i++) {\n      const elementToAdd = context.chain[i].element;\n      if (elementToAdd) {\n        parentElement.appendChild(elementToAdd);\n        this.__addedByRouter.set(elementToAdd, true);\n        if (parentElement === deepestCommonParent) {\n          this.__appearingContent.push(elementToAdd);\n        }\n        parentElement = elementToAdd;\n      }\n    }\n  }\n\n  __removeDisappearingContent() {\n    if (this.__disappearingContent) {\n      removeDomNodes(this.__disappearingContent);\n    }\n    this.__disappearingContent = null;\n    this.__appearingContent = null;\n  }\n\n  __removeAppearingContent() {\n    if (this.__disappearingContent && this.__appearingContent) {\n      removeDomNodes(this.__appearingContent);\n      this.__disappearingContent = null;\n      this.__appearingContent = null;\n    }\n  }\n\n  __runOnAfterLeaveCallbacks(currentContext, targetContext) {\n    if (!targetContext) {\n      return;\n    }\n\n    // REVERSE iteration: from Z to A\n    for (let i = targetContext.chain.length - 1; i >= currentContext.__divergedChainIndex; i--) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = targetContext.chain[i].element;\n      if (!currentComponent) {\n        continue;\n      }\n      try {\n        const location = createLocation(currentContext);\n        runCallbackIfPossible(\n          currentComponent.onAfterLeave,\n          [location, {}, targetContext.resolver],\n          currentComponent);\n      } finally {\n        if (this.__disappearingContent.indexOf(currentComponent) > -1) {\n          removeDomNodes(currentComponent.children);\n        }\n      }\n    }\n  }\n\n  __runOnAfterEnterCallbacks(currentContext) {\n    // forward iteration: from A to Z\n    for (let i = currentContext.__divergedChainIndex; i < currentContext.chain.length; i++) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = currentContext.chain[i].element || {};\n      const location = createLocation(currentContext, currentContext.chain[i].route);\n      runCallbackIfPossible(\n        currentComponent.onAfterEnter,\n        [location, {}, currentContext.resolver],\n        currentComponent);\n    }\n  }\n\n  __animateIfNeeded(context) {\n    const from = (this.__disappearingContent || [])[0];\n    const to = (this.__appearingContent || [])[0];\n    const promises = [];\n\n    const chain = context.chain;\n    let config;\n    for (let i = chain.length; i > 0; i--) {\n      if (chain[i - 1].route.animate) {\n        config = chain[i - 1].route.animate;\n        break;\n      }\n    }\n\n    if (from && to && config) {\n      const leave = isObject(config) && config.leave || 'leaving';\n      const enter = isObject(config) && config.enter || 'entering';\n      promises.push(animate(from, leave));\n      promises.push(animate(to, enter));\n    }\n\n    return Promise.all(promises).then(() => context);\n  }\n\n  /**\n   * Subscribes this instance to navigation events on the `window`.\n   *\n   * NOTE: beware of resource leaks. For as long as a router instance is\n   * subscribed to navigation events, it won't be garbage collected.\n   */\n  subscribe() {\n    window.addEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  /**\n   * Removes the subscription to navigation events created in the `subscribe()`\n   * method.\n   */\n  unsubscribe() {\n    window.removeEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  __onNavigationEvent(event) {\n    const {pathname, search, hash} = event ? event.detail : window.location;\n    if (isString(this.__normalizePathname(pathname))) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n      this.render({pathname, search, hash}, true);\n    }\n  }\n\n  /**\n   * Configures what triggers Router navigation events:\n   *  - `POPSTATE`: popstate events on the current `window`\n   *  - `CLICK`: click events on `<a>` links leading to the current page\n   *\n   * This method is invoked with the pre-configured values when creating a new Router instance.\n   * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.\n   *\n   * See the `router-config.js` for the default navigation triggers config. Based on it, you can\n   * create the own one and only import the triggers you need, instead of pulling in all the code,\n   * e.g. if you want to handle `click` differently.\n   *\n   * See also **Navigation Triggers** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * @param {...NavigationTrigger} triggers\n   */\n  static setTriggers(...triggers) {\n    setNavigationTriggers(triggers);\n  }\n\n  /**\n   * Generates a URL for the route with the given name, optionally performing\n   * substitution of parameters.\n   *\n   * The route is searched in all the Router instances subscribed to\n   * navigation events.\n   *\n   * **Note:** For child route names, only array children are considered.\n   * It is not possible to generate URLs using a name for routes set with\n   * a children function.\n   *\n   * @function urlForName\n   * @param {!string} name the route name or the route’s `component` name.\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForName(name, params) {\n    if (!this.__urlForName) {\n      this.__urlForName = generateUrls(this);\n    }\n    return getPathnameForRouter(\n      this.__urlForName(name, params),\n      this\n    );\n  }\n\n  /**\n   * Generates a URL for the given route path, optionally performing\n   * substitution of parameters.\n   *\n   * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForPath(path, params) {\n    return getPathnameForRouter(\n      Router.pathToRegexp.compile(path)(params),\n      this\n    );\n  }\n\n  /**\n   * Triggers navigation to a new path. Returns a boolean without waiting until\n   * the navigation is complete. Returns `true` if at least one `Router`\n   * has handled the navigation (was subscribed and had `baseUrl` matching\n   * the `path` argument), otherwise returns `false`.\n   *\n   * @param {!string|!{pathname: !string, search: (string|undefined), hash: (string|undefined)}} path\n   *   a new in-app path string, or an URL-like object with `pathname`\n   *   string property, and optional `search` and `hash` string properties.\n   * @return {boolean}\n   */\n  static go(path) {\n    const {pathname, search, hash} = isString(path)\n      ? this.__createUrl(path, 'http://a') // some base to omit origin\n      : path;\n    return fireRouterEvent('go', {pathname, search, hash});\n  }\n}\n","const DEV_MODE_CODE_REGEXP =\n  /\\/\\*\\*\\s+vaadin-dev-mode:start([\\s\\S]*)vaadin-dev-mode:end\\s+\\*\\*\\//i;\n\nconst FlowClients = window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients;\n\nfunction isMinified() {\n  function test() {\n    /** vaadin-dev-mode:start\n    return false;\n    vaadin-dev-mode:end **/\n    return true;\n  }\n  return uncommentAndRun(test);\n}\n\nfunction isDevelopmentMode() {\n  try {\n    if (isForcedDevelopmentMode()) {\n      return true;\n    }\n\n    if (!isLocalhost()) {\n      return false;\n    }\n\n    if (FlowClients) {\n      return !isFlowProductionMode();\n    }\n\n    return !isMinified();\n  } catch (e) {\n    // Some error in this code, assume production so no further actions will be taken\n    return false;\n  }\n}\n\nfunction isForcedDevelopmentMode() {\n  return localStorage.getItem(\"vaadin.developmentmode.force\");\n}\n\nfunction isLocalhost() {\n  return ([\"localhost\",\"127.0.0.1\"].indexOf(window.location.hostname) >= 0);\n}\n\nfunction isFlowProductionMode() {\n  if (FlowClients) {\n    const productionModeApps = Object.keys(FlowClients)\n      .map(key => FlowClients[key])\n      .filter(client => client.productionMode);\n    if (productionModeApps.length > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction uncommentAndRun(callback, args) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());\n  if (match) {\n    try {\n      // requires CSP: script-src 'unsafe-eval'\n      callback = new Function(match[1]);\n    } catch (e) {\n      // eat the exception\n      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e)\n    }\n  }\n\n  return callback(args);\n}\n\n// A guard against polymer-modulizer removing the window.Vaadin\n// initialization above.\nwindow['Vaadin'] = window['Vaadin'] || {};\n\n/**\n * Inspects the source code of the given `callback` function for\n * specially-marked _commented_ code. If such commented code is found in the\n * callback source, uncomments and runs that code instead of the callback\n * itself. Otherwise runs the callback as is.\n *\n * The optional arguments are passed into the callback / uncommented code,\n * the result is returned.\n *\n * See the `isMinified()` function source code in this file for an example.\n *\n */\nexport const runIfDevelopmentMode = function(callback, args) {\n  if (window.Vaadin.developmentMode) {\n    return uncommentAndRun(callback, args);\n  }\n};\n\nif (window.Vaadin.developmentMode === undefined) {\n  window.Vaadin.developmentMode = isDevelopmentMode();\n}\n","/* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */\n/*\n\nThis script gathers usage statistics from the application running in development mode.\n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport { runIfDevelopmentMode } from '@vaadin/vaadin-development-mode-detector/vaadin-development-mode-detector.js';\n\nfunction maybeGatherAndSendStats() {\n  /** vaadin-dev-mode:start\n  (function () {\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar getPolymerVersion = function getPolymerVersion() {\n  return window.Polymer && window.Polymer.version;\n};\n\nvar StatisticsGatherer = function () {\n  function StatisticsGatherer(logger) {\n    classCallCheck(this, StatisticsGatherer);\n\n    this.now = new Date().getTime();\n    this.logger = logger;\n  }\n\n  createClass(StatisticsGatherer, [{\n    key: 'frameworkVersionDetectors',\n    value: function frameworkVersionDetectors() {\n      return {\n        'Flow': function Flow() {\n          if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {\n            var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {\n              return window.Vaadin.Flow.clients[key];\n            }).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().flow;\n            });\n            if (flowVersions.length > 0) {\n              return flowVersions[0];\n            }\n          }\n        },\n        'Vaadin Framework': function VaadinFramework() {\n          if (window.vaadin && window.vaadin.clients) {\n            var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().vaadinVersion;\n            });\n            if (frameworkVersions.length > 0) {\n              return frameworkVersions[0];\n            }\n          }\n        },\n        'AngularJs': function AngularJs() {\n          if (window.angular && window.angular.version && window.angular.version) {\n            return window.angular.version.full;\n          }\n        },\n        'Angular': function Angular() {\n          if (window.ng) {\n            var tags = document.querySelectorAll(\"[ng-version]\");\n            if (tags.length > 0) {\n              return tags[0].getAttribute(\"ng-version\");\n            }\n            return \"Unknown\";\n          }\n        },\n        'Backbone.js': function BackboneJs() {\n          if (window.Backbone) {\n            return window.Backbone.VERSION;\n          }\n        },\n        'React': function React() {\n          var reactSelector = '[data-reactroot], [data-reactid]';\n          if (!!document.querySelector(reactSelector)) {\n            // React does not publish the version by default\n            return \"unknown\";\n          }\n        },\n        'Ember': function Ember() {\n          if (window.Em && window.Em.VERSION) {\n            return window.Em.VERSION;\n          } else if (window.Ember && window.Ember.VERSION) {\n            return window.Ember.VERSION;\n          }\n        },\n        'jQuery': function (_jQuery) {\n          function jQuery() {\n            return _jQuery.apply(this, arguments);\n          }\n\n          jQuery.toString = function () {\n            return _jQuery.toString();\n          };\n\n          return jQuery;\n        }(function () {\n          if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {\n            return jQuery.prototype.jquery;\n          }\n        }),\n        'Polymer': function Polymer() {\n          var version = getPolymerVersion();\n          if (version) {\n            return version;\n          }\n        },\n        'LitElement': function LitElement() {\n          var version = window.litElementVersions && window.litElementVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'LitHtml': function LitHtml() {\n          var version = window.litHtmlVersions && window.litHtmlVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'Vue.js': function VueJs() {\n          if (window.Vue) {\n            return window.Vue.version;\n          }\n        }\n      };\n    }\n  }, {\n    key: 'getUsedVaadinElements',\n    value: function getUsedVaadinElements(elements) {\n      var version = getPolymerVersion();\n      var elementClasses = void 0;\n      // NOTE: In case you edit the code here, YOU MUST UPDATE any statistics reporting code in Flow.\n      // Check all locations calling the method getEntries() in\n      // https://github.com/vaadin/flow/blob/master/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatistics.java#L106\n      // Currently it is only used by BootstrapHandler.\n      if (version && version.indexOf('2') === 0) {\n        // Polymer 2: components classes are stored in window.Vaadin\n        elementClasses = Object.keys(window.Vaadin).map(function (c) {\n          return window.Vaadin[c];\n        }).filter(function (c) {\n          return c.is;\n        });\n      } else {\n        // Polymer 3: components classes are stored in window.Vaadin.registrations\n        elementClasses = window.Vaadin.registrations || [];\n      }\n      elementClasses.forEach(function (klass) {\n        var version = klass.version ? klass.version : \"0.0.0\";\n        elements[klass.is] = { version: version };\n      });\n    }\n  }, {\n    key: 'getUsedVaadinThemes',\n    value: function getUsedVaadinThemes(themes) {\n      ['Lumo', 'Material'].forEach(function (themeName) {\n        var theme;\n        var version = getPolymerVersion();\n        if (version && version.indexOf('2') === 0) {\n          // Polymer 2: themes are stored in window.Vaadin\n          theme = window.Vaadin[themeName];\n        } else {\n          // Polymer 3: themes are stored in custom element registry\n          theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');\n        }\n        if (theme && theme.version) {\n          themes[themeName] = { version: theme.version };\n        }\n      });\n    }\n  }, {\n    key: 'getFrameworks',\n    value: function getFrameworks(frameworks) {\n      var detectors = this.frameworkVersionDetectors();\n      Object.keys(detectors).forEach(function (framework) {\n        var detector = detectors[framework];\n        try {\n          var version = detector();\n          if (version) {\n            frameworks[framework] = { version: version };\n          }\n        } catch (e) {}\n      });\n    }\n  }, {\n    key: 'gather',\n    value: function gather(storage) {\n      var storedStats = storage.read();\n      var gatheredStats = {};\n      var types = [\"elements\", \"frameworks\", \"themes\"];\n\n      types.forEach(function (type) {\n        gatheredStats[type] = {};\n        if (!storedStats[type]) {\n          storedStats[type] = {};\n        }\n      });\n\n      var previousStats = JSON.stringify(storedStats);\n\n      this.getUsedVaadinElements(gatheredStats.elements);\n      this.getFrameworks(gatheredStats.frameworks);\n      this.getUsedVaadinThemes(gatheredStats.themes);\n\n      var now = this.now;\n      types.forEach(function (type) {\n        var keys = Object.keys(gatheredStats[type]);\n        keys.forEach(function (key) {\n          if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {\n            storedStats[type][key] = { firstUsed: now };\n          }\n          // Discards any previously logged version number\n          storedStats[type][key].version = gatheredStats[type][key].version;\n          storedStats[type][key].lastUsed = now;\n        });\n      });\n\n      var newStats = JSON.stringify(storedStats);\n      storage.write(newStats);\n      if (newStats != previousStats && Object.keys(storedStats).length > 0) {\n        this.logger.debug(\"New stats: \" + newStats);\n      }\n    }\n  }]);\n  return StatisticsGatherer;\n}();\n\nvar StatisticsStorage = function () {\n  function StatisticsStorage(key) {\n    classCallCheck(this, StatisticsStorage);\n\n    this.key = key;\n  }\n\n  createClass(StatisticsStorage, [{\n    key: 'read',\n    value: function read() {\n      var localStorageStatsString = localStorage.getItem(this.key);\n      try {\n        return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');\n      } catch (e) {\n        return {};\n      }\n    }\n  }, {\n    key: 'write',\n    value: function write(data) {\n      localStorage.setItem(this.key, data);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      localStorage.removeItem(this.key);\n    }\n  }, {\n    key: 'isEmpty',\n    value: function isEmpty() {\n      var storedStats = this.read();\n      var empty = true;\n      Object.keys(storedStats).forEach(function (key) {\n        if (Object.keys(storedStats[key]).length > 0) {\n          empty = false;\n        }\n      });\n\n      return empty;\n    }\n  }]);\n  return StatisticsStorage;\n}();\n\nvar StatisticsSender = function () {\n  function StatisticsSender(url, logger) {\n    classCallCheck(this, StatisticsSender);\n\n    this.url = url;\n    this.logger = logger;\n  }\n\n  createClass(StatisticsSender, [{\n    key: 'send',\n    value: function send(data, errorHandler) {\n      var logger = this.logger;\n\n      if (navigator.onLine === false) {\n        logger.debug(\"Offline, can't send\");\n        errorHandler();\n        return;\n      }\n      logger.debug(\"Sending data to \" + this.url);\n\n      var req = new XMLHttpRequest();\n      req.withCredentials = true;\n      req.addEventListener(\"load\", function () {\n        // Stats sent, nothing more to do\n        logger.debug(\"Response: \" + req.responseText);\n      });\n      req.addEventListener(\"error\", function () {\n        logger.debug(\"Send failed\");\n        errorHandler();\n      });\n      req.addEventListener(\"abort\", function () {\n        logger.debug(\"Send aborted\");\n        errorHandler();\n      });\n      req.open(\"POST\", this.url);\n      req.setRequestHeader(\"Content-Type\", \"application/json\");\n      req.send(data);\n    }\n  }]);\n  return StatisticsSender;\n}();\n\nvar StatisticsLogger = function () {\n  function StatisticsLogger(id) {\n    classCallCheck(this, StatisticsLogger);\n\n    this.id = id;\n  }\n\n  createClass(StatisticsLogger, [{\n    key: '_isDebug',\n    value: function _isDebug() {\n      return localStorage.getItem(\"vaadin.\" + this.id + \".debug\");\n    }\n  }, {\n    key: 'debug',\n    value: function debug(msg) {\n      if (this._isDebug()) {\n        console.info(this.id + \": \" + msg);\n      }\n    }\n  }]);\n  return StatisticsLogger;\n}();\n\nvar UsageStatistics = function () {\n  function UsageStatistics() {\n    classCallCheck(this, UsageStatistics);\n\n    this.now = new Date();\n    this.timeNow = this.now.getTime();\n    this.gatherDelay = 10; // Delay between loading this file and gathering stats\n    this.initialDelay = 24 * 60 * 60;\n\n    this.logger = new StatisticsLogger(\"statistics\");\n    this.storage = new StatisticsStorage(\"vaadin.statistics.basket\");\n    this.gatherer = new StatisticsGatherer(this.logger);\n    this.sender = new StatisticsSender(\"https://tools.vaadin.com/usage-stats/submit\", this.logger);\n  }\n\n  createClass(UsageStatistics, [{\n    key: 'maybeGatherAndSend',\n    value: function maybeGatherAndSend() {\n      var _this = this;\n\n      if (localStorage.getItem(UsageStatistics.optOutKey)) {\n        return;\n      }\n      this.gatherer.gather(this.storage);\n      setTimeout(function () {\n        _this.maybeSend();\n      }, this.gatherDelay * 1000);\n    }\n  }, {\n    key: 'lottery',\n    value: function lottery() {\n      return true;\n    }\n  }, {\n    key: 'currentMonth',\n    value: function currentMonth() {\n      return this.now.getYear() * 12 + this.now.getMonth();\n    }\n  }, {\n    key: 'maybeSend',\n    value: function maybeSend() {\n      var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));\n\n      if (!firstUse) {\n        // Use a grace period to avoid interfering with tests, incognito mode etc\n        firstUse = this.timeNow;\n        localStorage.setItem(UsageStatistics.firstUseKey, firstUse);\n      }\n\n      if (this.timeNow < firstUse + this.initialDelay * 1000) {\n        this.logger.debug(\"No statistics will be sent until the initial delay of \" + this.initialDelay + \"s has passed\");\n        return;\n      }\n      if (this.currentMonth() <= monthProcessed) {\n        this.logger.debug(\"This month has already been processed\");\n        return;\n      }\n      localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());\n      // Use random sampling\n      if (this.lottery()) {\n        this.logger.debug(\"Congratulations, we have a winner!\");\n      } else {\n        this.logger.debug(\"Sorry, no stats from you this time\");\n        return;\n      }\n\n      this.send();\n    }\n  }, {\n    key: 'send',\n    value: function send() {\n      // Ensure we have the latest data\n      this.gatherer.gather(this.storage);\n\n      // Read, send and clean up\n      var data = this.storage.read();\n      data[\"firstUse\"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      data[\"usageStatisticsVersion\"] = UsageStatistics.version;\n      var info = 'This request contains usage statistics gathered from the application running in development mode. \\n\\nStatistics gathering is automatically disabled and excluded from production builds.\\n\\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\\n\\n\\n\\n';\n      var self = this;\n      this.sender.send(info + JSON.stringify(data), function () {\n        // Revert the 'month processed' flag\n        localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);\n      });\n    }\n  }], [{\n    key: 'version',\n    get: function get$1() {\n      return '2.1.0';\n    }\n  }, {\n    key: 'firstUseKey',\n    get: function get$1() {\n      return 'vaadin.statistics.firstuse';\n    }\n  }, {\n    key: 'monthProcessedKey',\n    get: function get$1() {\n      return 'vaadin.statistics.monthProcessed';\n    }\n  }, {\n    key: 'optOutKey',\n    get: function get$1() {\n      return 'vaadin.statistics.optout';\n    }\n  }]);\n  return UsageStatistics;\n}();\n\ntry {\n  window.Vaadin = window.Vaadin || {};\n  window.Vaadin.usageStatsChecker = window.Vaadin.usageStatsChecker || new UsageStatistics();\n  window.Vaadin.usageStatsChecker.maybeGatherAndSend();\n} catch (e) {\n  // Intentionally ignored as this is not a problem in the app being developed\n}\n\n}());\n\n  vaadin-dev-mode:end **/\n}\n\nexport const usageStatistics = function() {\n  if (typeof runIfDevelopmentMode === 'function') {\n    return runIfDevelopmentMode(maybeGatherAndSendStats);\n  }\n};\n","import {usageStatistics} from '@vaadin/vaadin-usage-statistics/vaadin-usage-statistics.js';\n\nwindow.Vaadin = window.Vaadin || {};\nwindow.Vaadin.registrations = window.Vaadin.registrations || [];\n\nwindow.Vaadin.registrations.push({\n  is: '@vaadin/router',\n  version: '1.7.4',\n});\n\nusageStatistics();\n","import CLICK from './triggers/click.js';\nimport POPSTATE from './triggers/popstate.js';\nimport {Router} from './router.js';\nimport './router-meta.js';\nRouter.NavigationTrigger = {POPSTATE, CLICK};\nexport {Router};\n","exports.interopDefault = function(a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function(source, dest) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    // Skip duplicate re-exports when they have the same value.\n    if (key in dest && dest[key] === source[key]) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function(dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","const API_BASE_URL = \"http://localhost:3000\";\r\nimport { rtdb, onValue, ref } from \"./rtdb\";\r\nimport map from \"lodash/map\";\r\n\r\nconst state = {\r\n  data: {\r\n    from: \"\",\r\n    messages: [],\r\n  },\r\n  listeners: [],\r\n\r\n  init() {\r\n    const chatroomsRef = ref(rtdb, \"/chatrooms/general\");\r\n    const currentState = this.getState();\r\n    onValue(chatroomsRef, (snapshot) => {\r\n      const messagesFromServer = snapshot.val();\r\n      const messagesList = map(messagesFromServer.messages);\r\n      currentState.messages = messagesList;\r\n      this.setState(currentState);\r\n    });\r\n  },\r\n\r\n  getState() {\r\n    return this.data;\r\n  },\r\n\r\n  setNombre(nombre: string) {\r\n    const currentState = this.getState();\r\n    currentState.nombre = nombre;\r\n    this.setState(currentState);\r\n  },\r\n\r\n  setState(newState) {\r\n    this.data = newState;\r\n    for (const cb of this.listeners) {\r\n      cb();\r\n    }\r\n    console.log(\"Soy el state, he cambiado\", this.data);\r\n  },\r\n\r\n  pushMessage(message: string) {\r\n    const nombreDelState = this.data.nombre;\r\n    fetch(API_BASE_URL + \"/messages\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ nombre: nombreDelState, message: message }),\r\n    });\r\n  },\r\n\r\n  subscribe(callback: (any) => any) {\r\n    this.listeners.push(callback);\r\n  },\r\n};\r\n\r\nexport { state };\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, onValue } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"V9ElgxUcUsDVWuCp6dFcwBYiJoc0kLfDr1vxUgIQ\",\r\n  databaseURL: \"https://apx-dwf-m6-ef304-default-rtdb.firebaseio.com\",\r\n  authDomain: \"apx-dwf-m6-ef304.firebaseapp.com\",\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst rtdb = getDatabase();\r\n\r\nexport { rtdb, ref, onValue };\r\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.9.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.30\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.9.2\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* IDB_GET */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* IDB_WRITE */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './deferred';\n\n/**\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\n * @internal\n */\nexport function promiseWithTimeout<T>(\n  promise: Promise<T>,\n  timeInMS = 2000\n): Promise<T> {\n  const deferredPromise = new Deferred<T>();\n  setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\n  promise.then(deferredPromise.resolve, deferredPromise.reject);\n  return deferredPromise.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n * Generates a new uuid.\n * @public\n */\nexport const uuidv4 = function (): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provide English ordinal letters after a number\n */\nexport function ordinal(i: number): string {\n  if (!Number.isFinite(i)) {\n    return `${i}`;\n  }\n  return i + indicator(i);\n}\n\nfunction indicator(i: number): string {\n  i = Math.abs(i);\n  const cent = i % 100;\n  if (cent >= 10 && cent <= 20) {\n    return 'th';\n  }\n  const dec = i % 10;\n  if (dec === 1) {\n    return 'st';\n  }\n  if (dec === 2) {\n    return 'nd';\n  }\n  if (dec === 3) {\n    return 'rd';\n  }\n  return 'th';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","export * from '@firebase/database';\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * This function was added to support non-listener queries,\r\n * specifically for use in repoGetValue. It sets up all the same\r\n * local cache data-structures (SyncPoint + View) that are\r\n * needed for listeners without installing an event registration.\r\n * If `query` is not `loadsAllData`, it will also provision a tag for\r\n * the query so that query results can be merged into the sync\r\n * tree using existing logic for tagged listener queries.\r\n *\r\n * @param syncTree - Synctree to add the query to.\r\n * @param query - Query to register\r\n * @returns tag as a string if query is not a default query, null if query is not.\r\n */\r\nfunction syncTreeRegisterQuery(syncTree, query) {\r\n    const { syncPoint, serverCache, writesCache, serverCacheComplete } = syncTreeRegisterSyncPoint(query, syncTree);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    if (!query._queryParams.loadsAllData()) {\r\n        return syncTreeTagForQuery_(syncTree, query);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Creates a new syncpoint for a query and creates a tag if the view doesn't exist.\r\n * Extracted from addEventRegistration to allow `repoGetValue` to properly set up the SyncTree\r\n * without actually listening on a query.\r\n */\r\nfunction syncTreeRegisterSyncPoint(query, syncTree) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    return {\r\n        syncPoint,\r\n        writesCache,\r\n        serverCache,\r\n        serverCacheComplete,\r\n        foundAncestorDefaultView,\r\n        viewAlreadyExists\r\n    };\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const { syncPoint, serverCache, writesCache, serverCacheComplete, viewAlreadyExists, foundAncestorDefaultView } = syncTreeRegisterSyncPoint(query, syncTree);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        // if this is a filtered query, then overwrite at path\r\n        if (query._queryParams.loadsAllData()) {\r\n            syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            // Simulate `syncTreeAddEventRegistration` without events/listener setup.\r\n            // We do this (along with the syncTreeRemoveEventRegistration` below) so that\r\n            // `repoGetValue` results have the same cache effects as initial listener(s)\r\n            // updates.\r\n            const tag = syncTreeRegisterQuery(repo.serverSyncTree_, query);\r\n            syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n            // Call `syncTreeRemoveEventRegistration` with a null event registration, since there is none.\r\n            // Note: The below code essentially unregisters the query and cleans up any views/syncpoints temporarily created above.\r\n        }\r\n        const cancels = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, null);\r\n        if (cancels.length > 0) {\r\n            repoLog(repo, 'unexpected cancel events in repoGetValue');\r\n        }\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * This function was added to support non-listener queries,\n * specifically for use in repoGetValue. It sets up all the same\n * local cache data-structures (SyncPoint + View) that are\n * needed for listeners without installing an event registration.\n * If `query` is not `loadsAllData`, it will also provision a tag for\n * the query so that query results can be merged into the sync\n * tree using existing logic for tagged listener queries.\n *\n * @param syncTree - Synctree to add the query to.\n * @param query - Query to register\n * @returns tag as a string if query is not a default query, null if query is not.\n */\nexport function syncTreeRegisterQuery(syncTree: SyncTree, query: QueryContext) {\n  const { syncPoint, serverCache, writesCache, serverCacheComplete } =\n    syncTreeRegisterSyncPoint(query, syncTree);\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  if (!query._queryParams.loadsAllData()) {\n    return syncTreeTagForQuery_(syncTree, query);\n  }\n  return null;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Creates a new syncpoint for a query and creates a tag if the view doesn't exist.\n * Extracted from addEventRegistration to allow `repoGetValue` to properly set up the SyncTree\n * without actually listening on a query.\n */\nexport function syncTreeRegisterSyncPoint(\n  query: QueryContext,\n  syncTree: SyncTree\n) {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  return {\n    syncPoint,\n    writesCache,\n    serverCache,\n    serverCacheComplete,\n    foundAncestorDefaultView,\n    viewAlreadyExists\n  };\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const {\n    syncPoint,\n    serverCache,\n    writesCache,\n    serverCacheComplete,\n    viewAlreadyExists,\n    foundAncestorDefaultView\n  } = syncTreeRegisterSyncPoint(query, syncTree);\n\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeRegisterQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      // if this is a filtered query, then overwrite at path\n      if (query._queryParams.loadsAllData()) {\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n      } else {\n        // Simulate `syncTreeAddEventRegistration` without events/listener setup.\n        // We do this (along with the syncTreeRemoveEventRegistration` below) so that\n        // `repoGetValue` results have the same cache effects as initial listener(s)\n        // updates.\n        const tag = syncTreeRegisterQuery(repo.serverSyncTree_, query);\n        syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n        // Call `syncTreeRemoveEventRegistration` with a null event registration, since there is none.\n        // Note: The below code essentially unregisters the query and cleans up any views/syncpoints temporarily created above.\n      }\n      const cancels = syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        null\n      );\n      if (cancels.length > 0) {\n        repoLog(repo, 'unexpected cancel events in repoGetValue');\n      }\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(\n    action: (child: DataSnapshot & { key: string }) => boolean | void\n  ): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbols = require('./_getSymbols'),\n    keys = require('./keys');\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n","var arrayPush = require('./_arrayPush'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var arrayFilter = require('./_arrayFilter'),\n    stubArray = require('./stubArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n","var castPath = require('./_castPath'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isIndex = require('./_isIndex'),\n    isLength = require('./isLength'),\n    toKey = require('./_toKey');\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","import { state } from \"../state\";\r\n\r\ntype Message = {\r\n  from: string;\r\n  message: string;\r\n};\r\n\r\nclass ChatPage extends HTMLElement {\r\n  connectedCallback() {\r\n    state.subscribe(() => {\r\n      const currentState = state.getState();\r\n      this.messages = currentState.messages;\r\n      this.render();\r\n    });\r\n    this.render();\r\n  }\r\n\r\n  messages: Message[] = [];\r\n\r\n  addListeners() {\r\n    const form = this.querySelector(\".submit-message\");\r\n\r\n    form.addEventListener(\"submit\", (e) => {\r\n      e.preventDefault();\r\n      const target = e.target as any;\r\n      state.pushMessage(target[\"new-message\"].value);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    this.innerHTML = `\r\n    <div>\r\n    <h1>Chat Page</h1>\r\n      <div class=\"messages\">\r\n        ${this.messages\r\n          .map((m) => {\r\n            return `<div class=\"message\">${m.from}:${m.message}</div>`;\r\n          })\r\n          .join(\"\")}\r\n      </div>\r\n      <form class=\"submit-message\">\r\n          <input type=\"text\" name=\"new-message\">\r\n          <button>Enviar</button>\r\n      </form>                \r\n    </div>\r\n   `;\r\n    this.addListeners();\r\n  }\r\n}\r\ncustomElements.define(\"x-chat-page\", ChatPage);\r\n","import { Router } from \"@vaadin/router\";\r\n\r\nconst router = new Router(document.querySelector(\".root\"));\r\nrouter.setRoutes([\r\n  { path: \"/\", component: \"x-home-page\" },\r\n  { path: \"/chat\", component: \"x-chat-page\" },\r\n]);\r\n"],"names":["pathToRegexp","cache","appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","packageName","setLogLevelImpl","name","version","stringToByteArray","enableLogging","MAX_NODE","setMaxNode","nodeFromJSON","setPriorityMaxNode","referenceConstructor","errorPrefixFxn","errorPrefix","enableLoggingImpl","SDK_VERSION"],"version":3,"file":"index.eb114a45.js.map","sourceRoot":"/__parcel_source_root/"}